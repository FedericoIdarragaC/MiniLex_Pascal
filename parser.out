Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSANT
    CASE
    CONST
    DEQUAL
    DISTINT
    DIV
    DOWNTO
    FILE
    FOR
    GOTO
    GREATEREQUAL
    HASHTAG
    IN
    ISEQUAL
    LABEL
    LBLOCK
    LSQBRACKET
    MINUSMINUS
    MOD
    NIL
    PACKED
    PLUSPLUS
    QUOTE
    RBLOCK
    RECORD
    REPEAT
    RSQBRACKET
    SET
    SLASH
    TILDE
    TO
    TYPE
    UNTIL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON block
Rule 2     declaration -> var_declaration
Rule 3     declaration -> procedure_declaration
Rule 4     declaration -> function_declaration
Rule 5     var_declaration -> VAR ID var_declaration2 COLON type
Rule 6     var_declaration2 -> empty
Rule 7     var_declaration2 -> COMMA ID var_declaration2
Rule 8     procedure_declaration -> procedure_declaration2 SEMICOLON
Rule 9     procedure_declaration -> empty
Rule 10    procedure_declaration2 -> PROCEDURE ID SEMICOLON block
Rule 11    function_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type SEMICOLON block
Rule 12    parameters -> VAR ID COLON type parameters2
Rule 13    parameters -> ID COLON type parameters2
Rule 14    parameters -> empty
Rule 15    parameters2 -> COMMA VAR ID COLON type parameters2
Rule 16    parameters2 -> COMMA ID COLON type parameters2
Rule 17    parameters2 -> empty
Rule 18    type -> simple_type
Rule 19    type -> array_type
Rule 20    array_type -> ARRAY LBRACKET NUMBER RBRACKET OF simple_type
Rule 21    simple_type -> INTEGER
Rule 22    block -> BEGIN statement block2 SEMICOLON END DOT
Rule 23    block -> BEGIN statement block2 END DOT
Rule 24    block2 -> empty
Rule 25    block2 -> SEMICOLON statement block2
Rule 26    empty -> <empty>
Rule 27    statement -> simple_statement
Rule 28    statement -> structured_statement
Rule 29    statement -> declaration
Rule 30    simple_statement -> assignment_statement
Rule 31    simple_statement -> call
Rule 32    simple_statement -> return_statement
Rule 33    simple_statement -> read_statement
Rule 34    simple_statement -> write_statement
Rule 35    simple_statement -> assert_statement
Rule 36    assignment_statement -> variable ASSIGN expr
Rule 37    call -> ID LPAREN arguments RPAREN
Rule 38    arguments -> expr arguments2
Rule 39    arguments -> SIMPLEQUOTE expr SIMPLEQUOTE arguments2
Rule 40    arguments -> empty
Rule 41    arguments2 -> empty
Rule 42    arguments2 -> COMMA expr arguments2
Rule 43    arguments2 -> COMMA SIMPLEQUOTE expr SIMPLEQUOTE arguments2
Rule 44    return_statement -> RETURN
Rule 45    return_statement -> RETURN expr
Rule 46    read_statement -> READ LPAREN read_statement2 RPAREN
Rule 47    read_statement2 -> variable
Rule 48    read_statement2 -> COMMA variable read_statement2
Rule 49    write_statement -> WRITELN LPAREN arguments RPAREN
Rule 50    assert_statement -> ASSERT LPAREN boolean_expr RPAREN
Rule 51    boolean_expr -> TRUE
Rule 52    boolean_expr -> FALSE
Rule 53    boolean_expr -> literal relational_operator literal
Rule 54    structured_statement -> block
Rule 55    structured_statement -> if_statement
Rule 56    structured_statement -> while_statement
Rule 57    if_statement -> IF boolean_expr THEN statement
Rule 58    if_statement -> IF boolean_expr THEN statement ELSE statement
Rule 59    while_statement -> WHILE boolean_expr DO statement
Rule 60    expr -> simple_expr
Rule 61    expr -> simple_expr relational_operator simple_expr
Rule 62    simple_expr -> sign term simple_expr2
Rule 63    simple_expr -> term simple_expr2
Rule 64    simple_expr2 -> empty
Rule 65    simple_expr2 -> adding_operator term simple_expr2
Rule 66    term -> factor
Rule 67    term -> factor multiplying_operator factor
Rule 68    factor -> call
Rule 69    factor -> variable
Rule 70    factor -> literal
Rule 71    factor -> LPAREN expr RPAREN
Rule 72    factor -> NOT factor
Rule 73    factor -> factor DOT SIZE
Rule 74    variable -> ID
Rule 75    variable -> LBRACKET ID NUMBER RBRACKET
Rule 76    relational_operator -> EQUAL
Rule 77    relational_operator -> LESS GREATER
Rule 78    relational_operator -> LESS
Rule 79    relational_operator -> LESSEQUAL
Rule 80    relational_operator -> GREATER EQUAL
Rule 81    relational_operator -> GREATER
Rule 82    sign -> PLUS
Rule 83    sign -> MINUS
Rule 84    adding_operator -> PLUS
Rule 85    adding_operator -> MINUS
Rule 86    adding_operator -> OR
Rule 87    multiplying_operator -> TIMES
Rule 88    multiplying_operator -> DIVIDE
Rule 89    multiplying_operator -> PERCENTAGE
Rule 90    multiplying_operator -> AND
Rule 91    literal -> NUMBER
Rule 92    literal -> string
Rule 93    string -> empty
Rule 94    string -> ID string

Terminals, with rules where they appear

AMPERSANT            : 
AND                  : 90
ARRAY                : 20
ASSERT               : 50
ASSIGN               : 36
BEGIN                : 22 23
CASE                 : 
COLON                : 5 11 12 13 15 16
COMMA                : 7 15 16 42 43 48
CONST                : 
DEQUAL               : 
DISTINT              : 
DIV                  : 
DIVIDE               : 88
DO                   : 59
DOT                  : 22 23 73
DOWNTO               : 
ELSE                 : 58
END                  : 22 23
EQUAL                : 76 80
FALSE                : 52
FILE                 : 
FOR                  : 
FUNCTION             : 11
GOTO                 : 
GREATER              : 77 80 81
GREATEREQUAL         : 
HASHTAG              : 
ID                   : 1 5 7 10 11 12 13 15 16 37 74 75 94
IF                   : 57 58
IN                   : 
INTEGER              : 21
ISEQUAL              : 
LABEL                : 
LBLOCK               : 
LBRACKET             : 20 75
LESS                 : 77 78
LESSEQUAL            : 79
LPAREN               : 11 37 46 49 50 71
LSQBRACKET           : 
MINUS                : 83 85
MINUSMINUS           : 
MOD                  : 
NIL                  : 
NOT                  : 72
NUMBER               : 20 75 91
OF                   : 20
OR                   : 86
PACKED               : 
PERCENTAGE           : 89
PLUS                 : 82 84
PLUSPLUS             : 
PROCEDURE            : 10
PROGRAM              : 1
QUOTE                : 
RBLOCK               : 
RBRACKET             : 20 75
READ                 : 46
RECORD               : 
REPEAT               : 
RETURN               : 44 45
RPAREN               : 11 37 46 49 50 71
RSQBRACKET           : 
SEMICOLON            : 1 8 10 11 22 25
SET                  : 
SIMPLEQUOTE          : 39 39 43 43
SIZE                 : 73
SLASH                : 
THEN                 : 57 58
TILDE                : 
TIMES                : 87
TO                   : 
TRUE                 : 51
TYPE                 : 
UNTIL                : 
VAR                  : 5 12 15
WHILE                : 59
WITH                 : 
WRITELN              : 49
error                : 

Nonterminals, with rules where they appear

adding_operator      : 65
arguments            : 37 49
arguments2           : 38 39 42 43
array_type           : 19
assert_statement     : 35
assignment_statement : 30
block                : 1 10 11 54
block2               : 22 23 25
boolean_expr         : 50 57 58 59
call                 : 31 68
declaration          : 29
empty                : 6 9 14 17 24 40 41 64 93
expr                 : 36 38 39 42 43 45 71
factor               : 66 67 67 72 73
function_declaration : 4
if_statement         : 55
literal              : 53 53 70
multiplying_operator : 67
parameters           : 11
parameters2          : 12 13 15 16
procedure_declaration : 3
procedure_declaration2 : 8
program              : 0
read_statement       : 33
read_statement2      : 46 48
relational_operator  : 53 61
return_statement     : 32
sign                 : 62
simple_expr          : 60 61 61
simple_expr2         : 62 63 65
simple_statement     : 27
simple_type          : 18 20
statement            : 22 23 25 57 58 58 59
string               : 92 94
structured_statement : 28
term                 : 62 63 65
type                 : 5 11 12 13 15 16
var_declaration      : 2
var_declaration2     : 5 7
variable             : 36 47 48 69
while_statement      : 56
write_statement      : 34

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON block

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON block

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON block

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . block
    (22) block -> . BEGIN statement block2 SEMICOLON END DOT
    (23) block -> . BEGIN statement block2 END DOT

    BEGIN           shift and go to state 6

    block                          shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMICOLON block .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON block .)


state 6

    (22) block -> BEGIN . statement block2 SEMICOLON END DOT
    (23) block -> BEGIN . statement block2 END DOT
    (27) statement -> . simple_statement
    (28) statement -> . structured_statement
    (29) statement -> . declaration
    (30) simple_statement -> . assignment_statement
    (31) simple_statement -> . call
    (32) simple_statement -> . return_statement
    (33) simple_statement -> . read_statement
    (34) simple_statement -> . write_statement
    (35) simple_statement -> . assert_statement
    (54) structured_statement -> . block
    (55) structured_statement -> . if_statement
    (56) structured_statement -> . while_statement
    (2) declaration -> . var_declaration
    (3) declaration -> . procedure_declaration
    (4) declaration -> . function_declaration
    (36) assignment_statement -> . variable ASSIGN expr
    (37) call -> . ID LPAREN arguments RPAREN
    (44) return_statement -> . RETURN
    (45) return_statement -> . RETURN expr
    (46) read_statement -> . READ LPAREN read_statement2 RPAREN
    (49) write_statement -> . WRITELN LPAREN arguments RPAREN
    (50) assert_statement -> . ASSERT LPAREN boolean_expr RPAREN
    (22) block -> . BEGIN statement block2 SEMICOLON END DOT
    (23) block -> . BEGIN statement block2 END DOT
    (57) if_statement -> . IF boolean_expr THEN statement
    (58) if_statement -> . IF boolean_expr THEN statement ELSE statement
    (59) while_statement -> . WHILE boolean_expr DO statement
    (5) var_declaration -> . VAR ID var_declaration2 COLON type
    (8) procedure_declaration -> . procedure_declaration2 SEMICOLON
    (9) procedure_declaration -> . empty
    (11) function_declaration -> . FUNCTION ID LPAREN parameters RPAREN COLON type SEMICOLON block
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (10) procedure_declaration2 -> . PROCEDURE ID SEMICOLON block
    (26) empty -> .

    ID              shift and go to state 24
    RETURN          shift and go to state 25
    READ            shift and go to state 26
    WRITELN         shift and go to state 27
    ASSERT          shift and go to state 28
    BEGIN           shift and go to state 6
    IF              shift and go to state 29
    WHILE           shift and go to state 30
    VAR             shift and go to state 31
    FUNCTION        shift and go to state 34
    LBRACKET        shift and go to state 35
    PROCEDURE       shift and go to state 36
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)

    statement                      shift and go to state 7
    simple_statement               shift and go to state 8
    structured_statement           shift and go to state 9
    declaration                    shift and go to state 10
    assignment_statement           shift and go to state 11
    call                           shift and go to state 12
    return_statement               shift and go to state 13
    read_statement                 shift and go to state 14
    write_statement                shift and go to state 15
    assert_statement               shift and go to state 16
    block                          shift and go to state 17
    if_statement                   shift and go to state 18
    while_statement                shift and go to state 19
    var_declaration                shift and go to state 20
    procedure_declaration          shift and go to state 21
    function_declaration           shift and go to state 22
    variable                       shift and go to state 23
    procedure_declaration2         shift and go to state 32
    empty                          shift and go to state 33

state 7

    (22) block -> BEGIN statement . block2 SEMICOLON END DOT
    (23) block -> BEGIN statement . block2 END DOT
    (24) block2 -> . empty
    (25) block2 -> . SEMICOLON statement block2
    (26) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 38
    END             reduce using rule 26 (empty -> .)

  ! SEMICOLON       [ reduce using rule 26 (empty -> .) ]

    block2                         shift and go to state 37
    empty                          shift and go to state 39

state 8

    (27) statement -> simple_statement .

    SEMICOLON       reduce using rule 27 (statement -> simple_statement .)
    END             reduce using rule 27 (statement -> simple_statement .)
    ELSE            reduce using rule 27 (statement -> simple_statement .)


state 9

    (28) statement -> structured_statement .

    SEMICOLON       reduce using rule 28 (statement -> structured_statement .)
    END             reduce using rule 28 (statement -> structured_statement .)
    ELSE            reduce using rule 28 (statement -> structured_statement .)


state 10

    (29) statement -> declaration .

    SEMICOLON       reduce using rule 29 (statement -> declaration .)
    END             reduce using rule 29 (statement -> declaration .)
    ELSE            reduce using rule 29 (statement -> declaration .)


state 11

    (30) simple_statement -> assignment_statement .

    SEMICOLON       reduce using rule 30 (simple_statement -> assignment_statement .)
    END             reduce using rule 30 (simple_statement -> assignment_statement .)
    ELSE            reduce using rule 30 (simple_statement -> assignment_statement .)


state 12

    (31) simple_statement -> call .

    SEMICOLON       reduce using rule 31 (simple_statement -> call .)
    END             reduce using rule 31 (simple_statement -> call .)
    ELSE            reduce using rule 31 (simple_statement -> call .)


state 13

    (32) simple_statement -> return_statement .

    SEMICOLON       reduce using rule 32 (simple_statement -> return_statement .)
    END             reduce using rule 32 (simple_statement -> return_statement .)
    ELSE            reduce using rule 32 (simple_statement -> return_statement .)


state 14

    (33) simple_statement -> read_statement .

    SEMICOLON       reduce using rule 33 (simple_statement -> read_statement .)
    END             reduce using rule 33 (simple_statement -> read_statement .)
    ELSE            reduce using rule 33 (simple_statement -> read_statement .)


state 15

    (34) simple_statement -> write_statement .

    SEMICOLON       reduce using rule 34 (simple_statement -> write_statement .)
    END             reduce using rule 34 (simple_statement -> write_statement .)
    ELSE            reduce using rule 34 (simple_statement -> write_statement .)


state 16

    (35) simple_statement -> assert_statement .

    SEMICOLON       reduce using rule 35 (simple_statement -> assert_statement .)
    END             reduce using rule 35 (simple_statement -> assert_statement .)
    ELSE            reduce using rule 35 (simple_statement -> assert_statement .)


state 17

    (54) structured_statement -> block .

    SEMICOLON       reduce using rule 54 (structured_statement -> block .)
    END             reduce using rule 54 (structured_statement -> block .)
    ELSE            reduce using rule 54 (structured_statement -> block .)


state 18

    (55) structured_statement -> if_statement .

    SEMICOLON       reduce using rule 55 (structured_statement -> if_statement .)
    END             reduce using rule 55 (structured_statement -> if_statement .)
    ELSE            reduce using rule 55 (structured_statement -> if_statement .)


state 19

    (56) structured_statement -> while_statement .

    SEMICOLON       reduce using rule 56 (structured_statement -> while_statement .)
    END             reduce using rule 56 (structured_statement -> while_statement .)
    ELSE            reduce using rule 56 (structured_statement -> while_statement .)


state 20

    (2) declaration -> var_declaration .

    SEMICOLON       reduce using rule 2 (declaration -> var_declaration .)
    END             reduce using rule 2 (declaration -> var_declaration .)
    ELSE            reduce using rule 2 (declaration -> var_declaration .)


state 21

    (3) declaration -> procedure_declaration .

    SEMICOLON       reduce using rule 3 (declaration -> procedure_declaration .)
    END             reduce using rule 3 (declaration -> procedure_declaration .)
    ELSE            reduce using rule 3 (declaration -> procedure_declaration .)


state 22

    (4) declaration -> function_declaration .

    SEMICOLON       reduce using rule 4 (declaration -> function_declaration .)
    END             reduce using rule 4 (declaration -> function_declaration .)
    ELSE            reduce using rule 4 (declaration -> function_declaration .)


state 23

    (36) assignment_statement -> variable . ASSIGN expr

    ASSIGN          shift and go to state 40


state 24

    (37) call -> ID . LPAREN arguments RPAREN
    (74) variable -> ID .

    LPAREN          shift and go to state 41
    ASSIGN          reduce using rule 74 (variable -> ID .)


state 25

    (44) return_statement -> RETURN .
    (45) return_statement -> RETURN . expr
    (60) expr -> . simple_expr
    (61) expr -> . simple_expr relational_operator simple_expr
    (62) simple_expr -> . sign term simple_expr2
    (63) simple_expr -> . term simple_expr2
    (82) sign -> . PLUS
    (83) sign -> . MINUS
    (66) term -> . factor
    (67) term -> . factor multiplying_operator factor
    (68) factor -> . call
    (69) factor -> . variable
    (70) factor -> . literal
    (71) factor -> . LPAREN expr RPAREN
    (72) factor -> . NOT factor
    (73) factor -> . factor DOT SIZE
    (37) call -> . ID LPAREN arguments RPAREN
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for END resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 26 (empty -> .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    LPAREN          shift and go to state 52
    NOT             shift and go to state 53
    ID              shift and go to state 54
    LBRACKET        shift and go to state 35
    NUMBER          shift and go to state 55
    DOT             reduce using rule 26 (empty -> .)
    TIMES           reduce using rule 26 (empty -> .)
    DIVIDE          reduce using rule 26 (empty -> .)
    PERCENTAGE      reduce using rule 26 (empty -> .)
    AND             reduce using rule 26 (empty -> .)
    OR              reduce using rule 26 (empty -> .)
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)
    ELSE            reduce using rule 26 (empty -> .)

  ! SEMICOLON       [ reduce using rule 44 (return_statement -> RETURN .) ]
  ! END             [ reduce using rule 44 (return_statement -> RETURN .) ]
  ! ELSE            [ reduce using rule 44 (return_statement -> RETURN .) ]
  ! PLUS            [ reduce using rule 26 (empty -> .) ]
  ! MINUS           [ reduce using rule 26 (empty -> .) ]

    expr                           shift and go to state 42
    simple_expr                    shift and go to state 43
    sign                           shift and go to state 44
    term                           shift and go to state 45
    factor                         shift and go to state 48
    call                           shift and go to state 49
    variable                       shift and go to state 50
    literal                        shift and go to state 51
    string                         shift and go to state 56
    empty                          shift and go to state 57

state 26

    (46) read_statement -> READ . LPAREN read_statement2 RPAREN

    LPAREN          shift and go to state 58


state 27

    (49) write_statement -> WRITELN . LPAREN arguments RPAREN

    LPAREN          shift and go to state 59


state 28

    (50) assert_statement -> ASSERT . LPAREN boolean_expr RPAREN

    LPAREN          shift and go to state 60


state 29

    (57) if_statement -> IF . boolean_expr THEN statement
    (58) if_statement -> IF . boolean_expr THEN statement ELSE statement
    (51) boolean_expr -> . TRUE
    (52) boolean_expr -> . FALSE
    (53) boolean_expr -> . literal relational_operator literal
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    NUMBER          shift and go to state 55
    ID              shift and go to state 65
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)

    boolean_expr                   shift and go to state 61
    literal                        shift and go to state 64
    string                         shift and go to state 56
    empty                          shift and go to state 57

state 30

    (59) while_statement -> WHILE . boolean_expr DO statement
    (51) boolean_expr -> . TRUE
    (52) boolean_expr -> . FALSE
    (53) boolean_expr -> . literal relational_operator literal
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    NUMBER          shift and go to state 55
    ID              shift and go to state 65
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)

    boolean_expr                   shift and go to state 66
    literal                        shift and go to state 64
    string                         shift and go to state 56
    empty                          shift and go to state 57

state 31

    (5) var_declaration -> VAR . ID var_declaration2 COLON type

    ID              shift and go to state 67


state 32

    (8) procedure_declaration -> procedure_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 68


state 33

    (9) procedure_declaration -> empty .

    SEMICOLON       reduce using rule 9 (procedure_declaration -> empty .)
    END             reduce using rule 9 (procedure_declaration -> empty .)
    ELSE            reduce using rule 9 (procedure_declaration -> empty .)


state 34

    (11) function_declaration -> FUNCTION . ID LPAREN parameters RPAREN COLON type SEMICOLON block

    ID              shift and go to state 69


state 35

    (75) variable -> LBRACKET . ID NUMBER RBRACKET

    ID              shift and go to state 70


state 36

    (10) procedure_declaration2 -> PROCEDURE . ID SEMICOLON block

    ID              shift and go to state 71


state 37

    (22) block -> BEGIN statement block2 . SEMICOLON END DOT
    (23) block -> BEGIN statement block2 . END DOT

    SEMICOLON       shift and go to state 72
    END             shift and go to state 73


state 38

    (25) block2 -> SEMICOLON . statement block2
    (27) statement -> . simple_statement
    (28) statement -> . structured_statement
    (29) statement -> . declaration
    (30) simple_statement -> . assignment_statement
    (31) simple_statement -> . call
    (32) simple_statement -> . return_statement
    (33) simple_statement -> . read_statement
    (34) simple_statement -> . write_statement
    (35) simple_statement -> . assert_statement
    (54) structured_statement -> . block
    (55) structured_statement -> . if_statement
    (56) structured_statement -> . while_statement
    (2) declaration -> . var_declaration
    (3) declaration -> . procedure_declaration
    (4) declaration -> . function_declaration
    (36) assignment_statement -> . variable ASSIGN expr
    (37) call -> . ID LPAREN arguments RPAREN
    (44) return_statement -> . RETURN
    (45) return_statement -> . RETURN expr
    (46) read_statement -> . READ LPAREN read_statement2 RPAREN
    (49) write_statement -> . WRITELN LPAREN arguments RPAREN
    (50) assert_statement -> . ASSERT LPAREN boolean_expr RPAREN
    (22) block -> . BEGIN statement block2 SEMICOLON END DOT
    (23) block -> . BEGIN statement block2 END DOT
    (57) if_statement -> . IF boolean_expr THEN statement
    (58) if_statement -> . IF boolean_expr THEN statement ELSE statement
    (59) while_statement -> . WHILE boolean_expr DO statement
    (5) var_declaration -> . VAR ID var_declaration2 COLON type
    (8) procedure_declaration -> . procedure_declaration2 SEMICOLON
    (9) procedure_declaration -> . empty
    (11) function_declaration -> . FUNCTION ID LPAREN parameters RPAREN COLON type SEMICOLON block
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (10) procedure_declaration2 -> . PROCEDURE ID SEMICOLON block
    (26) empty -> .

    ID              shift and go to state 24
    RETURN          shift and go to state 25
    READ            shift and go to state 26
    WRITELN         shift and go to state 27
    ASSERT          shift and go to state 28
    BEGIN           shift and go to state 6
    IF              shift and go to state 29
    WHILE           shift and go to state 30
    VAR             shift and go to state 31
    FUNCTION        shift and go to state 34
    LBRACKET        shift and go to state 35
    PROCEDURE       shift and go to state 36
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)

    statement                      shift and go to state 74
    simple_statement               shift and go to state 8
    structured_statement           shift and go to state 9
    declaration                    shift and go to state 10
    assignment_statement           shift and go to state 11
    call                           shift and go to state 12
    return_statement               shift and go to state 13
    read_statement                 shift and go to state 14
    write_statement                shift and go to state 15
    assert_statement               shift and go to state 16
    block                          shift and go to state 17
    if_statement                   shift and go to state 18
    while_statement                shift and go to state 19
    var_declaration                shift and go to state 20
    procedure_declaration          shift and go to state 21
    function_declaration           shift and go to state 22
    variable                       shift and go to state 23
    procedure_declaration2         shift and go to state 32
    empty                          shift and go to state 33

state 39

    (24) block2 -> empty .

    SEMICOLON       reduce using rule 24 (block2 -> empty .)
    END             reduce using rule 24 (block2 -> empty .)


state 40

    (36) assignment_statement -> variable ASSIGN . expr
    (60) expr -> . simple_expr
    (61) expr -> . simple_expr relational_operator simple_expr
    (62) simple_expr -> . sign term simple_expr2
    (63) simple_expr -> . term simple_expr2
    (82) sign -> . PLUS
    (83) sign -> . MINUS
    (66) term -> . factor
    (67) term -> . factor multiplying_operator factor
    (68) factor -> . call
    (69) factor -> . variable
    (70) factor -> . literal
    (71) factor -> . LPAREN expr RPAREN
    (72) factor -> . NOT factor
    (73) factor -> . factor DOT SIZE
    (37) call -> . ID LPAREN arguments RPAREN
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    LPAREN          shift and go to state 52
    NOT             shift and go to state 53
    ID              shift and go to state 54
    LBRACKET        shift and go to state 35
    NUMBER          shift and go to state 55
    DOT             reduce using rule 26 (empty -> .)
    TIMES           reduce using rule 26 (empty -> .)
    DIVIDE          reduce using rule 26 (empty -> .)
    PERCENTAGE      reduce using rule 26 (empty -> .)
    AND             reduce using rule 26 (empty -> .)
    OR              reduce using rule 26 (empty -> .)
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)
    ELSE            reduce using rule 26 (empty -> .)

  ! PLUS            [ reduce using rule 26 (empty -> .) ]
  ! MINUS           [ reduce using rule 26 (empty -> .) ]

    variable                       shift and go to state 50
    expr                           shift and go to state 75
    simple_expr                    shift and go to state 43
    sign                           shift and go to state 44
    term                           shift and go to state 45
    factor                         shift and go to state 48
    call                           shift and go to state 49
    literal                        shift and go to state 51
    string                         shift and go to state 56
    empty                          shift and go to state 57

state 41

    (37) call -> ID LPAREN . arguments RPAREN
    (38) arguments -> . expr arguments2
    (39) arguments -> . SIMPLEQUOTE expr SIMPLEQUOTE arguments2
    (40) arguments -> . empty
    (60) expr -> . simple_expr
    (61) expr -> . simple_expr relational_operator simple_expr
    (26) empty -> .
    (62) simple_expr -> . sign term simple_expr2
    (63) simple_expr -> . term simple_expr2
    (82) sign -> . PLUS
    (83) sign -> . MINUS
    (66) term -> . factor
    (67) term -> . factor multiplying_operator factor
    (68) factor -> . call
    (69) factor -> . variable
    (70) factor -> . literal
    (71) factor -> . LPAREN expr RPAREN
    (72) factor -> . NOT factor
    (73) factor -> . factor DOT SIZE
    (37) call -> . ID LPAREN arguments RPAREN
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SIMPLEQUOTE     shift and go to state 78
    RPAREN          reduce using rule 26 (empty -> .)
    DOT             reduce using rule 26 (empty -> .)
    TIMES           reduce using rule 26 (empty -> .)
    DIVIDE          reduce using rule 26 (empty -> .)
    PERCENTAGE      reduce using rule 26 (empty -> .)
    AND             reduce using rule 26 (empty -> .)
    OR              reduce using rule 26 (empty -> .)
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    COMMA           reduce using rule 26 (empty -> .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    LPAREN          shift and go to state 52
    NOT             shift and go to state 53
    ID              shift and go to state 54
    LBRACKET        shift and go to state 35
    NUMBER          shift and go to state 55

  ! PLUS            [ reduce using rule 26 (empty -> .) ]
  ! MINUS           [ reduce using rule 26 (empty -> .) ]

    arguments                      shift and go to state 76
    expr                           shift and go to state 77
    empty                          shift and go to state 79
    simple_expr                    shift and go to state 43
    sign                           shift and go to state 44
    term                           shift and go to state 45
    factor                         shift and go to state 48
    call                           shift and go to state 49
    variable                       shift and go to state 50
    literal                        shift and go to state 51
    string                         shift and go to state 56

state 42

    (45) return_statement -> RETURN expr .

    SEMICOLON       reduce using rule 45 (return_statement -> RETURN expr .)
    END             reduce using rule 45 (return_statement -> RETURN expr .)
    ELSE            reduce using rule 45 (return_statement -> RETURN expr .)


state 43

    (60) expr -> simple_expr .
    (61) expr -> simple_expr . relational_operator simple_expr
    (76) relational_operator -> . EQUAL
    (77) relational_operator -> . LESS GREATER
    (78) relational_operator -> . LESS
    (79) relational_operator -> . LESSEQUAL
    (80) relational_operator -> . GREATER EQUAL
    (81) relational_operator -> . GREATER

    SEMICOLON       reduce using rule 60 (expr -> simple_expr .)
    END             reduce using rule 60 (expr -> simple_expr .)
    ELSE            reduce using rule 60 (expr -> simple_expr .)
    COMMA           reduce using rule 60 (expr -> simple_expr .)
    RPAREN          reduce using rule 60 (expr -> simple_expr .)
    SIMPLEQUOTE     reduce using rule 60 (expr -> simple_expr .)
    EQUAL           shift and go to state 81
    LESS            shift and go to state 82
    LESSEQUAL       shift and go to state 84
    GREATER         shift and go to state 83

    relational_operator            shift and go to state 80

state 44

    (62) simple_expr -> sign . term simple_expr2
    (66) term -> . factor
    (67) term -> . factor multiplying_operator factor
    (68) factor -> . call
    (69) factor -> . variable
    (70) factor -> . literal
    (71) factor -> . LPAREN expr RPAREN
    (72) factor -> . NOT factor
    (73) factor -> . factor DOT SIZE
    (37) call -> . ID LPAREN arguments RPAREN
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

    LPAREN          shift and go to state 52
    NOT             shift and go to state 53
    ID              shift and go to state 54
    LBRACKET        shift and go to state 35
    NUMBER          shift and go to state 55
    DOT             reduce using rule 26 (empty -> .)
    TIMES           reduce using rule 26 (empty -> .)
    DIVIDE          reduce using rule 26 (empty -> .)
    PERCENTAGE      reduce using rule 26 (empty -> .)
    AND             reduce using rule 26 (empty -> .)
    PLUS            reduce using rule 26 (empty -> .)
    MINUS           reduce using rule 26 (empty -> .)
    OR              reduce using rule 26 (empty -> .)
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)
    ELSE            reduce using rule 26 (empty -> .)
    COMMA           reduce using rule 26 (empty -> .)
    RPAREN          reduce using rule 26 (empty -> .)
    SIMPLEQUOTE     reduce using rule 26 (empty -> .)

    term                           shift and go to state 85
    factor                         shift and go to state 48
    call                           shift and go to state 49
    variable                       shift and go to state 50
    literal                        shift and go to state 51
    string                         shift and go to state 56
    empty                          shift and go to state 57

state 45

    (63) simple_expr -> term . simple_expr2
    (64) simple_expr2 -> . empty
    (65) simple_expr2 -> . adding_operator term simple_expr2
    (26) empty -> .
    (84) adding_operator -> . PLUS
    (85) adding_operator -> . MINUS
    (86) adding_operator -> . OR

    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)
    ELSE            reduce using rule 26 (empty -> .)
    COMMA           reduce using rule 26 (empty -> .)
    RPAREN          reduce using rule 26 (empty -> .)
    SIMPLEQUOTE     reduce using rule 26 (empty -> .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    OR              shift and go to state 91

    simple_expr2                   shift and go to state 86
    empty                          shift and go to state 87
    adding_operator                shift and go to state 88

state 46

    (82) sign -> PLUS .

    LPAREN          reduce using rule 82 (sign -> PLUS .)
    NOT             reduce using rule 82 (sign -> PLUS .)
    ID              reduce using rule 82 (sign -> PLUS .)
    LBRACKET        reduce using rule 82 (sign -> PLUS .)
    NUMBER          reduce using rule 82 (sign -> PLUS .)
    PLUS            reduce using rule 82 (sign -> PLUS .)
    MINUS           reduce using rule 82 (sign -> PLUS .)
    OR              reduce using rule 82 (sign -> PLUS .)
    DOT             reduce using rule 82 (sign -> PLUS .)
    TIMES           reduce using rule 82 (sign -> PLUS .)
    DIVIDE          reduce using rule 82 (sign -> PLUS .)
    PERCENTAGE      reduce using rule 82 (sign -> PLUS .)
    AND             reduce using rule 82 (sign -> PLUS .)
    EQUAL           reduce using rule 82 (sign -> PLUS .)
    LESS            reduce using rule 82 (sign -> PLUS .)
    LESSEQUAL       reduce using rule 82 (sign -> PLUS .)
    GREATER         reduce using rule 82 (sign -> PLUS .)
    SEMICOLON       reduce using rule 82 (sign -> PLUS .)
    END             reduce using rule 82 (sign -> PLUS .)
    ELSE            reduce using rule 82 (sign -> PLUS .)
    COMMA           reduce using rule 82 (sign -> PLUS .)
    RPAREN          reduce using rule 82 (sign -> PLUS .)
    SIMPLEQUOTE     reduce using rule 82 (sign -> PLUS .)


state 47

    (83) sign -> MINUS .

    LPAREN          reduce using rule 83 (sign -> MINUS .)
    NOT             reduce using rule 83 (sign -> MINUS .)
    ID              reduce using rule 83 (sign -> MINUS .)
    LBRACKET        reduce using rule 83 (sign -> MINUS .)
    NUMBER          reduce using rule 83 (sign -> MINUS .)
    PLUS            reduce using rule 83 (sign -> MINUS .)
    MINUS           reduce using rule 83 (sign -> MINUS .)
    OR              reduce using rule 83 (sign -> MINUS .)
    DOT             reduce using rule 83 (sign -> MINUS .)
    TIMES           reduce using rule 83 (sign -> MINUS .)
    DIVIDE          reduce using rule 83 (sign -> MINUS .)
    PERCENTAGE      reduce using rule 83 (sign -> MINUS .)
    AND             reduce using rule 83 (sign -> MINUS .)
    EQUAL           reduce using rule 83 (sign -> MINUS .)
    LESS            reduce using rule 83 (sign -> MINUS .)
    LESSEQUAL       reduce using rule 83 (sign -> MINUS .)
    GREATER         reduce using rule 83 (sign -> MINUS .)
    SEMICOLON       reduce using rule 83 (sign -> MINUS .)
    END             reduce using rule 83 (sign -> MINUS .)
    ELSE            reduce using rule 83 (sign -> MINUS .)
    COMMA           reduce using rule 83 (sign -> MINUS .)
    RPAREN          reduce using rule 83 (sign -> MINUS .)
    SIMPLEQUOTE     reduce using rule 83 (sign -> MINUS .)


state 48

    (66) term -> factor .
    (67) term -> factor . multiplying_operator factor
    (73) factor -> factor . DOT SIZE
    (87) multiplying_operator -> . TIMES
    (88) multiplying_operator -> . DIVIDE
    (89) multiplying_operator -> . PERCENTAGE
    (90) multiplying_operator -> . AND

    PLUS            reduce using rule 66 (term -> factor .)
    MINUS           reduce using rule 66 (term -> factor .)
    OR              reduce using rule 66 (term -> factor .)
    EQUAL           reduce using rule 66 (term -> factor .)
    LESS            reduce using rule 66 (term -> factor .)
    LESSEQUAL       reduce using rule 66 (term -> factor .)
    GREATER         reduce using rule 66 (term -> factor .)
    SEMICOLON       reduce using rule 66 (term -> factor .)
    END             reduce using rule 66 (term -> factor .)
    ELSE            reduce using rule 66 (term -> factor .)
    COMMA           reduce using rule 66 (term -> factor .)
    RPAREN          reduce using rule 66 (term -> factor .)
    SIMPLEQUOTE     reduce using rule 66 (term -> factor .)
    DOT             shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    PERCENTAGE      shift and go to state 96
    AND             shift and go to state 97

    multiplying_operator           shift and go to state 92

state 49

    (68) factor -> call .

    DOT             reduce using rule 68 (factor -> call .)
    TIMES           reduce using rule 68 (factor -> call .)
    DIVIDE          reduce using rule 68 (factor -> call .)
    PERCENTAGE      reduce using rule 68 (factor -> call .)
    AND             reduce using rule 68 (factor -> call .)
    PLUS            reduce using rule 68 (factor -> call .)
    MINUS           reduce using rule 68 (factor -> call .)
    OR              reduce using rule 68 (factor -> call .)
    EQUAL           reduce using rule 68 (factor -> call .)
    LESS            reduce using rule 68 (factor -> call .)
    LESSEQUAL       reduce using rule 68 (factor -> call .)
    GREATER         reduce using rule 68 (factor -> call .)
    SEMICOLON       reduce using rule 68 (factor -> call .)
    END             reduce using rule 68 (factor -> call .)
    ELSE            reduce using rule 68 (factor -> call .)
    COMMA           reduce using rule 68 (factor -> call .)
    RPAREN          reduce using rule 68 (factor -> call .)
    SIMPLEQUOTE     reduce using rule 68 (factor -> call .)


state 50

    (69) factor -> variable .

    DOT             reduce using rule 69 (factor -> variable .)
    TIMES           reduce using rule 69 (factor -> variable .)
    DIVIDE          reduce using rule 69 (factor -> variable .)
    PERCENTAGE      reduce using rule 69 (factor -> variable .)
    AND             reduce using rule 69 (factor -> variable .)
    PLUS            reduce using rule 69 (factor -> variable .)
    MINUS           reduce using rule 69 (factor -> variable .)
    OR              reduce using rule 69 (factor -> variable .)
    EQUAL           reduce using rule 69 (factor -> variable .)
    LESS            reduce using rule 69 (factor -> variable .)
    LESSEQUAL       reduce using rule 69 (factor -> variable .)
    GREATER         reduce using rule 69 (factor -> variable .)
    SEMICOLON       reduce using rule 69 (factor -> variable .)
    END             reduce using rule 69 (factor -> variable .)
    ELSE            reduce using rule 69 (factor -> variable .)
    COMMA           reduce using rule 69 (factor -> variable .)
    RPAREN          reduce using rule 69 (factor -> variable .)
    SIMPLEQUOTE     reduce using rule 69 (factor -> variable .)


state 51

    (70) factor -> literal .

    DOT             reduce using rule 70 (factor -> literal .)
    TIMES           reduce using rule 70 (factor -> literal .)
    DIVIDE          reduce using rule 70 (factor -> literal .)
    PERCENTAGE      reduce using rule 70 (factor -> literal .)
    AND             reduce using rule 70 (factor -> literal .)
    PLUS            reduce using rule 70 (factor -> literal .)
    MINUS           reduce using rule 70 (factor -> literal .)
    OR              reduce using rule 70 (factor -> literal .)
    EQUAL           reduce using rule 70 (factor -> literal .)
    LESS            reduce using rule 70 (factor -> literal .)
    LESSEQUAL       reduce using rule 70 (factor -> literal .)
    GREATER         reduce using rule 70 (factor -> literal .)
    SEMICOLON       reduce using rule 70 (factor -> literal .)
    END             reduce using rule 70 (factor -> literal .)
    ELSE            reduce using rule 70 (factor -> literal .)
    COMMA           reduce using rule 70 (factor -> literal .)
    RPAREN          reduce using rule 70 (factor -> literal .)
    SIMPLEQUOTE     reduce using rule 70 (factor -> literal .)


state 52

    (71) factor -> LPAREN . expr RPAREN
    (60) expr -> . simple_expr
    (61) expr -> . simple_expr relational_operator simple_expr
    (62) simple_expr -> . sign term simple_expr2
    (63) simple_expr -> . term simple_expr2
    (82) sign -> . PLUS
    (83) sign -> . MINUS
    (66) term -> . factor
    (67) term -> . factor multiplying_operator factor
    (68) factor -> . call
    (69) factor -> . variable
    (70) factor -> . literal
    (71) factor -> . LPAREN expr RPAREN
    (72) factor -> . NOT factor
    (73) factor -> . factor DOT SIZE
    (37) call -> . ID LPAREN arguments RPAREN
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    LPAREN          shift and go to state 52
    NOT             shift and go to state 53
    ID              shift and go to state 54
    LBRACKET        shift and go to state 35
    NUMBER          shift and go to state 55
    DOT             reduce using rule 26 (empty -> .)
    TIMES           reduce using rule 26 (empty -> .)
    DIVIDE          reduce using rule 26 (empty -> .)
    PERCENTAGE      reduce using rule 26 (empty -> .)
    AND             reduce using rule 26 (empty -> .)
    OR              reduce using rule 26 (empty -> .)
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    RPAREN          reduce using rule 26 (empty -> .)

  ! PLUS            [ reduce using rule 26 (empty -> .) ]
  ! MINUS           [ reduce using rule 26 (empty -> .) ]

    expr                           shift and go to state 98
    simple_expr                    shift and go to state 43
    sign                           shift and go to state 44
    term                           shift and go to state 45
    factor                         shift and go to state 48
    call                           shift and go to state 49
    variable                       shift and go to state 50
    literal                        shift and go to state 51
    string                         shift and go to state 56
    empty                          shift and go to state 57

state 53

    (72) factor -> NOT . factor
    (68) factor -> . call
    (69) factor -> . variable
    (70) factor -> . literal
    (71) factor -> . LPAREN expr RPAREN
    (72) factor -> . NOT factor
    (73) factor -> . factor DOT SIZE
    (37) call -> . ID LPAREN arguments RPAREN
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

    LPAREN          shift and go to state 52
    NOT             shift and go to state 53
    ID              shift and go to state 54
    LBRACKET        shift and go to state 35
    NUMBER          shift and go to state 55
    DOT             reduce using rule 26 (empty -> .)
    TIMES           reduce using rule 26 (empty -> .)
    DIVIDE          reduce using rule 26 (empty -> .)
    PERCENTAGE      reduce using rule 26 (empty -> .)
    AND             reduce using rule 26 (empty -> .)
    PLUS            reduce using rule 26 (empty -> .)
    MINUS           reduce using rule 26 (empty -> .)
    OR              reduce using rule 26 (empty -> .)
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)
    ELSE            reduce using rule 26 (empty -> .)
    COMMA           reduce using rule 26 (empty -> .)
    RPAREN          reduce using rule 26 (empty -> .)
    SIMPLEQUOTE     reduce using rule 26 (empty -> .)

    factor                         shift and go to state 99
    call                           shift and go to state 49
    variable                       shift and go to state 50
    literal                        shift and go to state 51
    string                         shift and go to state 56
    empty                          shift and go to state 57

state 54

    (37) call -> ID . LPAREN arguments RPAREN
    (74) variable -> ID .
    (94) string -> ID . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

  ! reduce/reduce conflict for DOT resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for TIMES resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for PERCENTAGE resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for AND resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for OR resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for EQUAL resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for LESS resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for LESSEQUAL resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for GREATER resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for END resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 26 (empty -> .)
  ! reduce/reduce conflict for SIMPLEQUOTE resolved using rule 26 (empty -> .)
    LPAREN          shift and go to state 41
    ID              shift and go to state 65
    DOT             reduce using rule 26 (empty -> .)
    TIMES           reduce using rule 26 (empty -> .)
    DIVIDE          reduce using rule 26 (empty -> .)
    PERCENTAGE      reduce using rule 26 (empty -> .)
    AND             reduce using rule 26 (empty -> .)
    PLUS            reduce using rule 26 (empty -> .)
    MINUS           reduce using rule 26 (empty -> .)
    OR              reduce using rule 26 (empty -> .)
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)
    ELSE            reduce using rule 26 (empty -> .)
    COMMA           reduce using rule 26 (empty -> .)
    RPAREN          reduce using rule 26 (empty -> .)
    SIMPLEQUOTE     reduce using rule 26 (empty -> .)

  ! DOT             [ reduce using rule 74 (variable -> ID .) ]
  ! TIMES           [ reduce using rule 74 (variable -> ID .) ]
  ! DIVIDE          [ reduce using rule 74 (variable -> ID .) ]
  ! PERCENTAGE      [ reduce using rule 74 (variable -> ID .) ]
  ! AND             [ reduce using rule 74 (variable -> ID .) ]
  ! PLUS            [ reduce using rule 74 (variable -> ID .) ]
  ! MINUS           [ reduce using rule 74 (variable -> ID .) ]
  ! OR              [ reduce using rule 74 (variable -> ID .) ]
  ! EQUAL           [ reduce using rule 74 (variable -> ID .) ]
  ! LESS            [ reduce using rule 74 (variable -> ID .) ]
  ! LESSEQUAL       [ reduce using rule 74 (variable -> ID .) ]
  ! GREATER         [ reduce using rule 74 (variable -> ID .) ]
  ! SEMICOLON       [ reduce using rule 74 (variable -> ID .) ]
  ! END             [ reduce using rule 74 (variable -> ID .) ]
  ! ELSE            [ reduce using rule 74 (variable -> ID .) ]
  ! COMMA           [ reduce using rule 74 (variable -> ID .) ]
  ! RPAREN          [ reduce using rule 74 (variable -> ID .) ]
  ! SIMPLEQUOTE     [ reduce using rule 74 (variable -> ID .) ]

    string                         shift and go to state 100
    empty                          shift and go to state 57

state 55

    (91) literal -> NUMBER .

    DOT             reduce using rule 91 (literal -> NUMBER .)
    TIMES           reduce using rule 91 (literal -> NUMBER .)
    DIVIDE          reduce using rule 91 (literal -> NUMBER .)
    PERCENTAGE      reduce using rule 91 (literal -> NUMBER .)
    AND             reduce using rule 91 (literal -> NUMBER .)
    PLUS            reduce using rule 91 (literal -> NUMBER .)
    MINUS           reduce using rule 91 (literal -> NUMBER .)
    OR              reduce using rule 91 (literal -> NUMBER .)
    EQUAL           reduce using rule 91 (literal -> NUMBER .)
    LESS            reduce using rule 91 (literal -> NUMBER .)
    LESSEQUAL       reduce using rule 91 (literal -> NUMBER .)
    GREATER         reduce using rule 91 (literal -> NUMBER .)
    SEMICOLON       reduce using rule 91 (literal -> NUMBER .)
    END             reduce using rule 91 (literal -> NUMBER .)
    ELSE            reduce using rule 91 (literal -> NUMBER .)
    COMMA           reduce using rule 91 (literal -> NUMBER .)
    RPAREN          reduce using rule 91 (literal -> NUMBER .)
    SIMPLEQUOTE     reduce using rule 91 (literal -> NUMBER .)
    THEN            reduce using rule 91 (literal -> NUMBER .)
    DO              reduce using rule 91 (literal -> NUMBER .)


state 56

    (92) literal -> string .

    DOT             reduce using rule 92 (literal -> string .)
    TIMES           reduce using rule 92 (literal -> string .)
    DIVIDE          reduce using rule 92 (literal -> string .)
    PERCENTAGE      reduce using rule 92 (literal -> string .)
    AND             reduce using rule 92 (literal -> string .)
    PLUS            reduce using rule 92 (literal -> string .)
    MINUS           reduce using rule 92 (literal -> string .)
    OR              reduce using rule 92 (literal -> string .)
    EQUAL           reduce using rule 92 (literal -> string .)
    LESS            reduce using rule 92 (literal -> string .)
    LESSEQUAL       reduce using rule 92 (literal -> string .)
    GREATER         reduce using rule 92 (literal -> string .)
    SEMICOLON       reduce using rule 92 (literal -> string .)
    END             reduce using rule 92 (literal -> string .)
    ELSE            reduce using rule 92 (literal -> string .)
    COMMA           reduce using rule 92 (literal -> string .)
    RPAREN          reduce using rule 92 (literal -> string .)
    SIMPLEQUOTE     reduce using rule 92 (literal -> string .)
    THEN            reduce using rule 92 (literal -> string .)
    DO              reduce using rule 92 (literal -> string .)


state 57

    (93) string -> empty .

    DOT             reduce using rule 93 (string -> empty .)
    TIMES           reduce using rule 93 (string -> empty .)
    DIVIDE          reduce using rule 93 (string -> empty .)
    PERCENTAGE      reduce using rule 93 (string -> empty .)
    AND             reduce using rule 93 (string -> empty .)
    PLUS            reduce using rule 93 (string -> empty .)
    MINUS           reduce using rule 93 (string -> empty .)
    OR              reduce using rule 93 (string -> empty .)
    EQUAL           reduce using rule 93 (string -> empty .)
    LESS            reduce using rule 93 (string -> empty .)
    LESSEQUAL       reduce using rule 93 (string -> empty .)
    GREATER         reduce using rule 93 (string -> empty .)
    SEMICOLON       reduce using rule 93 (string -> empty .)
    END             reduce using rule 93 (string -> empty .)
    ELSE            reduce using rule 93 (string -> empty .)
    COMMA           reduce using rule 93 (string -> empty .)
    RPAREN          reduce using rule 93 (string -> empty .)
    SIMPLEQUOTE     reduce using rule 93 (string -> empty .)
    THEN            reduce using rule 93 (string -> empty .)
    DO              reduce using rule 93 (string -> empty .)


state 58

    (46) read_statement -> READ LPAREN . read_statement2 RPAREN
    (47) read_statement2 -> . variable
    (48) read_statement2 -> . COMMA variable read_statement2
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET

    COMMA           shift and go to state 103
    ID              shift and go to state 104
    LBRACKET        shift and go to state 35

    read_statement2                shift and go to state 101
    variable                       shift and go to state 102

state 59

    (49) write_statement -> WRITELN LPAREN . arguments RPAREN
    (38) arguments -> . expr arguments2
    (39) arguments -> . SIMPLEQUOTE expr SIMPLEQUOTE arguments2
    (40) arguments -> . empty
    (60) expr -> . simple_expr
    (61) expr -> . simple_expr relational_operator simple_expr
    (26) empty -> .
    (62) simple_expr -> . sign term simple_expr2
    (63) simple_expr -> . term simple_expr2
    (82) sign -> . PLUS
    (83) sign -> . MINUS
    (66) term -> . factor
    (67) term -> . factor multiplying_operator factor
    (68) factor -> . call
    (69) factor -> . variable
    (70) factor -> . literal
    (71) factor -> . LPAREN expr RPAREN
    (72) factor -> . NOT factor
    (73) factor -> . factor DOT SIZE
    (37) call -> . ID LPAREN arguments RPAREN
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SIMPLEQUOTE     shift and go to state 78
    RPAREN          reduce using rule 26 (empty -> .)
    DOT             reduce using rule 26 (empty -> .)
    TIMES           reduce using rule 26 (empty -> .)
    DIVIDE          reduce using rule 26 (empty -> .)
    PERCENTAGE      reduce using rule 26 (empty -> .)
    AND             reduce using rule 26 (empty -> .)
    OR              reduce using rule 26 (empty -> .)
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    COMMA           reduce using rule 26 (empty -> .)
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    LPAREN          shift and go to state 52
    NOT             shift and go to state 53
    ID              shift and go to state 54
    LBRACKET        shift and go to state 35
    NUMBER          shift and go to state 55

  ! PLUS            [ reduce using rule 26 (empty -> .) ]
  ! MINUS           [ reduce using rule 26 (empty -> .) ]

    arguments                      shift and go to state 105
    expr                           shift and go to state 77
    empty                          shift and go to state 79
    simple_expr                    shift and go to state 43
    sign                           shift and go to state 44
    term                           shift and go to state 45
    factor                         shift and go to state 48
    call                           shift and go to state 49
    variable                       shift and go to state 50
    literal                        shift and go to state 51
    string                         shift and go to state 56

state 60

    (50) assert_statement -> ASSERT LPAREN . boolean_expr RPAREN
    (51) boolean_expr -> . TRUE
    (52) boolean_expr -> . FALSE
    (53) boolean_expr -> . literal relational_operator literal
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    NUMBER          shift and go to state 55
    ID              shift and go to state 65
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)

    boolean_expr                   shift and go to state 106
    literal                        shift and go to state 64
    string                         shift and go to state 56
    empty                          shift and go to state 57

state 61

    (57) if_statement -> IF boolean_expr . THEN statement
    (58) if_statement -> IF boolean_expr . THEN statement ELSE statement

    THEN            shift and go to state 107


state 62

    (51) boolean_expr -> TRUE .

    THEN            reduce using rule 51 (boolean_expr -> TRUE .)
    DO              reduce using rule 51 (boolean_expr -> TRUE .)
    RPAREN          reduce using rule 51 (boolean_expr -> TRUE .)


state 63

    (52) boolean_expr -> FALSE .

    THEN            reduce using rule 52 (boolean_expr -> FALSE .)
    DO              reduce using rule 52 (boolean_expr -> FALSE .)
    RPAREN          reduce using rule 52 (boolean_expr -> FALSE .)


state 64

    (53) boolean_expr -> literal . relational_operator literal
    (76) relational_operator -> . EQUAL
    (77) relational_operator -> . LESS GREATER
    (78) relational_operator -> . LESS
    (79) relational_operator -> . LESSEQUAL
    (80) relational_operator -> . GREATER EQUAL
    (81) relational_operator -> . GREATER

    EQUAL           shift and go to state 81
    LESS            shift and go to state 82
    LESSEQUAL       shift and go to state 84
    GREATER         shift and go to state 83

    relational_operator            shift and go to state 108

state 65

    (94) string -> ID . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

    ID              shift and go to state 65
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    DOT             reduce using rule 26 (empty -> .)
    TIMES           reduce using rule 26 (empty -> .)
    DIVIDE          reduce using rule 26 (empty -> .)
    PERCENTAGE      reduce using rule 26 (empty -> .)
    AND             reduce using rule 26 (empty -> .)
    PLUS            reduce using rule 26 (empty -> .)
    MINUS           reduce using rule 26 (empty -> .)
    OR              reduce using rule 26 (empty -> .)
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)
    ELSE            reduce using rule 26 (empty -> .)
    COMMA           reduce using rule 26 (empty -> .)
    RPAREN          reduce using rule 26 (empty -> .)
    SIMPLEQUOTE     reduce using rule 26 (empty -> .)
    THEN            reduce using rule 26 (empty -> .)
    DO              reduce using rule 26 (empty -> .)

    string                         shift and go to state 100
    empty                          shift and go to state 57

state 66

    (59) while_statement -> WHILE boolean_expr . DO statement

    DO              shift and go to state 109


state 67

    (5) var_declaration -> VAR ID . var_declaration2 COLON type
    (6) var_declaration2 -> . empty
    (7) var_declaration2 -> . COMMA ID var_declaration2
    (26) empty -> .

    COMMA           shift and go to state 112
    COLON           reduce using rule 26 (empty -> .)

    var_declaration2               shift and go to state 110
    empty                          shift and go to state 111

state 68

    (8) procedure_declaration -> procedure_declaration2 SEMICOLON .

    SEMICOLON       reduce using rule 8 (procedure_declaration -> procedure_declaration2 SEMICOLON .)
    END             reduce using rule 8 (procedure_declaration -> procedure_declaration2 SEMICOLON .)
    ELSE            reduce using rule 8 (procedure_declaration -> procedure_declaration2 SEMICOLON .)


state 69

    (11) function_declaration -> FUNCTION ID . LPAREN parameters RPAREN COLON type SEMICOLON block

    LPAREN          shift and go to state 113


state 70

    (75) variable -> LBRACKET ID . NUMBER RBRACKET

    NUMBER          shift and go to state 114


state 71

    (10) procedure_declaration2 -> PROCEDURE ID . SEMICOLON block

    SEMICOLON       shift and go to state 115


state 72

    (22) block -> BEGIN statement block2 SEMICOLON . END DOT

    END             shift and go to state 116


state 73

    (23) block -> BEGIN statement block2 END . DOT

    DOT             shift and go to state 117


state 74

    (25) block2 -> SEMICOLON statement . block2
    (24) block2 -> . empty
    (25) block2 -> . SEMICOLON statement block2
    (26) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 38
    END             reduce using rule 26 (empty -> .)

  ! SEMICOLON       [ reduce using rule 26 (empty -> .) ]

    block2                         shift and go to state 118
    empty                          shift and go to state 39

state 75

    (36) assignment_statement -> variable ASSIGN expr .

    SEMICOLON       reduce using rule 36 (assignment_statement -> variable ASSIGN expr .)
    END             reduce using rule 36 (assignment_statement -> variable ASSIGN expr .)
    ELSE            reduce using rule 36 (assignment_statement -> variable ASSIGN expr .)


state 76

    (37) call -> ID LPAREN arguments . RPAREN

    RPAREN          shift and go to state 119


state 77

    (38) arguments -> expr . arguments2
    (41) arguments2 -> . empty
    (42) arguments2 -> . COMMA expr arguments2
    (43) arguments2 -> . COMMA SIMPLEQUOTE expr SIMPLEQUOTE arguments2
    (26) empty -> .

    COMMA           shift and go to state 122
    RPAREN          reduce using rule 26 (empty -> .)

    arguments2                     shift and go to state 120
    empty                          shift and go to state 121

state 78

    (39) arguments -> SIMPLEQUOTE . expr SIMPLEQUOTE arguments2
    (60) expr -> . simple_expr
    (61) expr -> . simple_expr relational_operator simple_expr
    (62) simple_expr -> . sign term simple_expr2
    (63) simple_expr -> . term simple_expr2
    (82) sign -> . PLUS
    (83) sign -> . MINUS
    (66) term -> . factor
    (67) term -> . factor multiplying_operator factor
    (68) factor -> . call
    (69) factor -> . variable
    (70) factor -> . literal
    (71) factor -> . LPAREN expr RPAREN
    (72) factor -> . NOT factor
    (73) factor -> . factor DOT SIZE
    (37) call -> . ID LPAREN arguments RPAREN
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    LPAREN          shift and go to state 52
    NOT             shift and go to state 53
    ID              shift and go to state 54
    LBRACKET        shift and go to state 35
    NUMBER          shift and go to state 55
    DOT             reduce using rule 26 (empty -> .)
    TIMES           reduce using rule 26 (empty -> .)
    DIVIDE          reduce using rule 26 (empty -> .)
    PERCENTAGE      reduce using rule 26 (empty -> .)
    AND             reduce using rule 26 (empty -> .)
    OR              reduce using rule 26 (empty -> .)
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    SIMPLEQUOTE     reduce using rule 26 (empty -> .)

  ! PLUS            [ reduce using rule 26 (empty -> .) ]
  ! MINUS           [ reduce using rule 26 (empty -> .) ]

    expr                           shift and go to state 123
    simple_expr                    shift and go to state 43
    sign                           shift and go to state 44
    term                           shift and go to state 45
    factor                         shift and go to state 48
    call                           shift and go to state 49
    variable                       shift and go to state 50
    literal                        shift and go to state 51
    string                         shift and go to state 56
    empty                          shift and go to state 57

state 79

    (40) arguments -> empty .
    (93) string -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 40 (arguments -> empty .)
    RPAREN          reduce using rule 40 (arguments -> empty .)
    DOT             reduce using rule 93 (string -> empty .)
    TIMES           reduce using rule 93 (string -> empty .)
    DIVIDE          reduce using rule 93 (string -> empty .)
    PERCENTAGE      reduce using rule 93 (string -> empty .)
    AND             reduce using rule 93 (string -> empty .)
    PLUS            reduce using rule 93 (string -> empty .)
    MINUS           reduce using rule 93 (string -> empty .)
    OR              reduce using rule 93 (string -> empty .)
    EQUAL           reduce using rule 93 (string -> empty .)
    LESS            reduce using rule 93 (string -> empty .)
    LESSEQUAL       reduce using rule 93 (string -> empty .)
    GREATER         reduce using rule 93 (string -> empty .)
    COMMA           reduce using rule 93 (string -> empty .)

  ! RPAREN          [ reduce using rule 93 (string -> empty .) ]


state 80

    (61) expr -> simple_expr relational_operator . simple_expr
    (62) simple_expr -> . sign term simple_expr2
    (63) simple_expr -> . term simple_expr2
    (82) sign -> . PLUS
    (83) sign -> . MINUS
    (66) term -> . factor
    (67) term -> . factor multiplying_operator factor
    (68) factor -> . call
    (69) factor -> . variable
    (70) factor -> . literal
    (71) factor -> . LPAREN expr RPAREN
    (72) factor -> . NOT factor
    (73) factor -> . factor DOT SIZE
    (37) call -> . ID LPAREN arguments RPAREN
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    LPAREN          shift and go to state 52
    NOT             shift and go to state 53
    ID              shift and go to state 54
    LBRACKET        shift and go to state 35
    NUMBER          shift and go to state 55
    DOT             reduce using rule 26 (empty -> .)
    TIMES           reduce using rule 26 (empty -> .)
    DIVIDE          reduce using rule 26 (empty -> .)
    PERCENTAGE      reduce using rule 26 (empty -> .)
    AND             reduce using rule 26 (empty -> .)
    OR              reduce using rule 26 (empty -> .)
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)
    ELSE            reduce using rule 26 (empty -> .)
    COMMA           reduce using rule 26 (empty -> .)
    RPAREN          reduce using rule 26 (empty -> .)
    SIMPLEQUOTE     reduce using rule 26 (empty -> .)

  ! PLUS            [ reduce using rule 26 (empty -> .) ]
  ! MINUS           [ reduce using rule 26 (empty -> .) ]

    simple_expr                    shift and go to state 124
    sign                           shift and go to state 44
    term                           shift and go to state 45
    factor                         shift and go to state 48
    call                           shift and go to state 49
    variable                       shift and go to state 50
    literal                        shift and go to state 51
    string                         shift and go to state 56
    empty                          shift and go to state 57

state 81

    (76) relational_operator -> EQUAL .

    PLUS            reduce using rule 76 (relational_operator -> EQUAL .)
    MINUS           reduce using rule 76 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 76 (relational_operator -> EQUAL .)
    NOT             reduce using rule 76 (relational_operator -> EQUAL .)
    ID              reduce using rule 76 (relational_operator -> EQUAL .)
    LBRACKET        reduce using rule 76 (relational_operator -> EQUAL .)
    NUMBER          reduce using rule 76 (relational_operator -> EQUAL .)
    OR              reduce using rule 76 (relational_operator -> EQUAL .)
    DOT             reduce using rule 76 (relational_operator -> EQUAL .)
    TIMES           reduce using rule 76 (relational_operator -> EQUAL .)
    DIVIDE          reduce using rule 76 (relational_operator -> EQUAL .)
    PERCENTAGE      reduce using rule 76 (relational_operator -> EQUAL .)
    AND             reduce using rule 76 (relational_operator -> EQUAL .)
    SEMICOLON       reduce using rule 76 (relational_operator -> EQUAL .)
    END             reduce using rule 76 (relational_operator -> EQUAL .)
    ELSE            reduce using rule 76 (relational_operator -> EQUAL .)
    COMMA           reduce using rule 76 (relational_operator -> EQUAL .)
    RPAREN          reduce using rule 76 (relational_operator -> EQUAL .)
    SIMPLEQUOTE     reduce using rule 76 (relational_operator -> EQUAL .)
    THEN            reduce using rule 76 (relational_operator -> EQUAL .)
    DO              reduce using rule 76 (relational_operator -> EQUAL .)


state 82

    (77) relational_operator -> LESS . GREATER
    (78) relational_operator -> LESS .

    GREATER         shift and go to state 125
    PLUS            reduce using rule 78 (relational_operator -> LESS .)
    MINUS           reduce using rule 78 (relational_operator -> LESS .)
    LPAREN          reduce using rule 78 (relational_operator -> LESS .)
    NOT             reduce using rule 78 (relational_operator -> LESS .)
    ID              reduce using rule 78 (relational_operator -> LESS .)
    LBRACKET        reduce using rule 78 (relational_operator -> LESS .)
    NUMBER          reduce using rule 78 (relational_operator -> LESS .)
    OR              reduce using rule 78 (relational_operator -> LESS .)
    DOT             reduce using rule 78 (relational_operator -> LESS .)
    TIMES           reduce using rule 78 (relational_operator -> LESS .)
    DIVIDE          reduce using rule 78 (relational_operator -> LESS .)
    PERCENTAGE      reduce using rule 78 (relational_operator -> LESS .)
    AND             reduce using rule 78 (relational_operator -> LESS .)
    SEMICOLON       reduce using rule 78 (relational_operator -> LESS .)
    END             reduce using rule 78 (relational_operator -> LESS .)
    ELSE            reduce using rule 78 (relational_operator -> LESS .)
    COMMA           reduce using rule 78 (relational_operator -> LESS .)
    RPAREN          reduce using rule 78 (relational_operator -> LESS .)
    SIMPLEQUOTE     reduce using rule 78 (relational_operator -> LESS .)
    THEN            reduce using rule 78 (relational_operator -> LESS .)
    DO              reduce using rule 78 (relational_operator -> LESS .)


state 83

    (80) relational_operator -> GREATER . EQUAL
    (81) relational_operator -> GREATER .

    EQUAL           shift and go to state 126
    PLUS            reduce using rule 81 (relational_operator -> GREATER .)
    MINUS           reduce using rule 81 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 81 (relational_operator -> GREATER .)
    NOT             reduce using rule 81 (relational_operator -> GREATER .)
    ID              reduce using rule 81 (relational_operator -> GREATER .)
    LBRACKET        reduce using rule 81 (relational_operator -> GREATER .)
    NUMBER          reduce using rule 81 (relational_operator -> GREATER .)
    OR              reduce using rule 81 (relational_operator -> GREATER .)
    DOT             reduce using rule 81 (relational_operator -> GREATER .)
    TIMES           reduce using rule 81 (relational_operator -> GREATER .)
    DIVIDE          reduce using rule 81 (relational_operator -> GREATER .)
    PERCENTAGE      reduce using rule 81 (relational_operator -> GREATER .)
    AND             reduce using rule 81 (relational_operator -> GREATER .)
    SEMICOLON       reduce using rule 81 (relational_operator -> GREATER .)
    END             reduce using rule 81 (relational_operator -> GREATER .)
    ELSE            reduce using rule 81 (relational_operator -> GREATER .)
    COMMA           reduce using rule 81 (relational_operator -> GREATER .)
    RPAREN          reduce using rule 81 (relational_operator -> GREATER .)
    SIMPLEQUOTE     reduce using rule 81 (relational_operator -> GREATER .)
    THEN            reduce using rule 81 (relational_operator -> GREATER .)
    DO              reduce using rule 81 (relational_operator -> GREATER .)


state 84

    (79) relational_operator -> LESSEQUAL .

    PLUS            reduce using rule 79 (relational_operator -> LESSEQUAL .)
    MINUS           reduce using rule 79 (relational_operator -> LESSEQUAL .)
    LPAREN          reduce using rule 79 (relational_operator -> LESSEQUAL .)
    NOT             reduce using rule 79 (relational_operator -> LESSEQUAL .)
    ID              reduce using rule 79 (relational_operator -> LESSEQUAL .)
    LBRACKET        reduce using rule 79 (relational_operator -> LESSEQUAL .)
    NUMBER          reduce using rule 79 (relational_operator -> LESSEQUAL .)
    OR              reduce using rule 79 (relational_operator -> LESSEQUAL .)
    DOT             reduce using rule 79 (relational_operator -> LESSEQUAL .)
    TIMES           reduce using rule 79 (relational_operator -> LESSEQUAL .)
    DIVIDE          reduce using rule 79 (relational_operator -> LESSEQUAL .)
    PERCENTAGE      reduce using rule 79 (relational_operator -> LESSEQUAL .)
    AND             reduce using rule 79 (relational_operator -> LESSEQUAL .)
    SEMICOLON       reduce using rule 79 (relational_operator -> LESSEQUAL .)
    END             reduce using rule 79 (relational_operator -> LESSEQUAL .)
    ELSE            reduce using rule 79 (relational_operator -> LESSEQUAL .)
    COMMA           reduce using rule 79 (relational_operator -> LESSEQUAL .)
    RPAREN          reduce using rule 79 (relational_operator -> LESSEQUAL .)
    SIMPLEQUOTE     reduce using rule 79 (relational_operator -> LESSEQUAL .)
    THEN            reduce using rule 79 (relational_operator -> LESSEQUAL .)
    DO              reduce using rule 79 (relational_operator -> LESSEQUAL .)


state 85

    (62) simple_expr -> sign term . simple_expr2
    (64) simple_expr2 -> . empty
    (65) simple_expr2 -> . adding_operator term simple_expr2
    (26) empty -> .
    (84) adding_operator -> . PLUS
    (85) adding_operator -> . MINUS
    (86) adding_operator -> . OR

    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)
    ELSE            reduce using rule 26 (empty -> .)
    COMMA           reduce using rule 26 (empty -> .)
    RPAREN          reduce using rule 26 (empty -> .)
    SIMPLEQUOTE     reduce using rule 26 (empty -> .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    OR              shift and go to state 91

    simple_expr2                   shift and go to state 127
    empty                          shift and go to state 87
    adding_operator                shift and go to state 88

state 86

    (63) simple_expr -> term simple_expr2 .

    EQUAL           reduce using rule 63 (simple_expr -> term simple_expr2 .)
    LESS            reduce using rule 63 (simple_expr -> term simple_expr2 .)
    LESSEQUAL       reduce using rule 63 (simple_expr -> term simple_expr2 .)
    GREATER         reduce using rule 63 (simple_expr -> term simple_expr2 .)
    SEMICOLON       reduce using rule 63 (simple_expr -> term simple_expr2 .)
    END             reduce using rule 63 (simple_expr -> term simple_expr2 .)
    ELSE            reduce using rule 63 (simple_expr -> term simple_expr2 .)
    COMMA           reduce using rule 63 (simple_expr -> term simple_expr2 .)
    RPAREN          reduce using rule 63 (simple_expr -> term simple_expr2 .)
    SIMPLEQUOTE     reduce using rule 63 (simple_expr -> term simple_expr2 .)


state 87

    (64) simple_expr2 -> empty .

    EQUAL           reduce using rule 64 (simple_expr2 -> empty .)
    LESS            reduce using rule 64 (simple_expr2 -> empty .)
    LESSEQUAL       reduce using rule 64 (simple_expr2 -> empty .)
    GREATER         reduce using rule 64 (simple_expr2 -> empty .)
    SEMICOLON       reduce using rule 64 (simple_expr2 -> empty .)
    END             reduce using rule 64 (simple_expr2 -> empty .)
    ELSE            reduce using rule 64 (simple_expr2 -> empty .)
    COMMA           reduce using rule 64 (simple_expr2 -> empty .)
    RPAREN          reduce using rule 64 (simple_expr2 -> empty .)
    SIMPLEQUOTE     reduce using rule 64 (simple_expr2 -> empty .)


state 88

    (65) simple_expr2 -> adding_operator . term simple_expr2
    (66) term -> . factor
    (67) term -> . factor multiplying_operator factor
    (68) factor -> . call
    (69) factor -> . variable
    (70) factor -> . literal
    (71) factor -> . LPAREN expr RPAREN
    (72) factor -> . NOT factor
    (73) factor -> . factor DOT SIZE
    (37) call -> . ID LPAREN arguments RPAREN
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

    LPAREN          shift and go to state 52
    NOT             shift and go to state 53
    ID              shift and go to state 54
    LBRACKET        shift and go to state 35
    NUMBER          shift and go to state 55
    DOT             reduce using rule 26 (empty -> .)
    TIMES           reduce using rule 26 (empty -> .)
    DIVIDE          reduce using rule 26 (empty -> .)
    PERCENTAGE      reduce using rule 26 (empty -> .)
    AND             reduce using rule 26 (empty -> .)
    PLUS            reduce using rule 26 (empty -> .)
    MINUS           reduce using rule 26 (empty -> .)
    OR              reduce using rule 26 (empty -> .)
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)
    ELSE            reduce using rule 26 (empty -> .)
    COMMA           reduce using rule 26 (empty -> .)
    RPAREN          reduce using rule 26 (empty -> .)
    SIMPLEQUOTE     reduce using rule 26 (empty -> .)

    term                           shift and go to state 128
    factor                         shift and go to state 48
    call                           shift and go to state 49
    variable                       shift and go to state 50
    literal                        shift and go to state 51
    string                         shift and go to state 56
    empty                          shift and go to state 57

state 89

    (84) adding_operator -> PLUS .

    LPAREN          reduce using rule 84 (adding_operator -> PLUS .)
    NOT             reduce using rule 84 (adding_operator -> PLUS .)
    ID              reduce using rule 84 (adding_operator -> PLUS .)
    LBRACKET        reduce using rule 84 (adding_operator -> PLUS .)
    NUMBER          reduce using rule 84 (adding_operator -> PLUS .)
    PLUS            reduce using rule 84 (adding_operator -> PLUS .)
    MINUS           reduce using rule 84 (adding_operator -> PLUS .)
    OR              reduce using rule 84 (adding_operator -> PLUS .)
    DOT             reduce using rule 84 (adding_operator -> PLUS .)
    TIMES           reduce using rule 84 (adding_operator -> PLUS .)
    DIVIDE          reduce using rule 84 (adding_operator -> PLUS .)
    PERCENTAGE      reduce using rule 84 (adding_operator -> PLUS .)
    AND             reduce using rule 84 (adding_operator -> PLUS .)
    EQUAL           reduce using rule 84 (adding_operator -> PLUS .)
    LESS            reduce using rule 84 (adding_operator -> PLUS .)
    LESSEQUAL       reduce using rule 84 (adding_operator -> PLUS .)
    GREATER         reduce using rule 84 (adding_operator -> PLUS .)
    SEMICOLON       reduce using rule 84 (adding_operator -> PLUS .)
    END             reduce using rule 84 (adding_operator -> PLUS .)
    ELSE            reduce using rule 84 (adding_operator -> PLUS .)
    COMMA           reduce using rule 84 (adding_operator -> PLUS .)
    RPAREN          reduce using rule 84 (adding_operator -> PLUS .)
    SIMPLEQUOTE     reduce using rule 84 (adding_operator -> PLUS .)


state 90

    (85) adding_operator -> MINUS .

    LPAREN          reduce using rule 85 (adding_operator -> MINUS .)
    NOT             reduce using rule 85 (adding_operator -> MINUS .)
    ID              reduce using rule 85 (adding_operator -> MINUS .)
    LBRACKET        reduce using rule 85 (adding_operator -> MINUS .)
    NUMBER          reduce using rule 85 (adding_operator -> MINUS .)
    PLUS            reduce using rule 85 (adding_operator -> MINUS .)
    MINUS           reduce using rule 85 (adding_operator -> MINUS .)
    OR              reduce using rule 85 (adding_operator -> MINUS .)
    DOT             reduce using rule 85 (adding_operator -> MINUS .)
    TIMES           reduce using rule 85 (adding_operator -> MINUS .)
    DIVIDE          reduce using rule 85 (adding_operator -> MINUS .)
    PERCENTAGE      reduce using rule 85 (adding_operator -> MINUS .)
    AND             reduce using rule 85 (adding_operator -> MINUS .)
    EQUAL           reduce using rule 85 (adding_operator -> MINUS .)
    LESS            reduce using rule 85 (adding_operator -> MINUS .)
    LESSEQUAL       reduce using rule 85 (adding_operator -> MINUS .)
    GREATER         reduce using rule 85 (adding_operator -> MINUS .)
    SEMICOLON       reduce using rule 85 (adding_operator -> MINUS .)
    END             reduce using rule 85 (adding_operator -> MINUS .)
    ELSE            reduce using rule 85 (adding_operator -> MINUS .)
    COMMA           reduce using rule 85 (adding_operator -> MINUS .)
    RPAREN          reduce using rule 85 (adding_operator -> MINUS .)
    SIMPLEQUOTE     reduce using rule 85 (adding_operator -> MINUS .)


state 91

    (86) adding_operator -> OR .

    LPAREN          reduce using rule 86 (adding_operator -> OR .)
    NOT             reduce using rule 86 (adding_operator -> OR .)
    ID              reduce using rule 86 (adding_operator -> OR .)
    LBRACKET        reduce using rule 86 (adding_operator -> OR .)
    NUMBER          reduce using rule 86 (adding_operator -> OR .)
    PLUS            reduce using rule 86 (adding_operator -> OR .)
    MINUS           reduce using rule 86 (adding_operator -> OR .)
    OR              reduce using rule 86 (adding_operator -> OR .)
    DOT             reduce using rule 86 (adding_operator -> OR .)
    TIMES           reduce using rule 86 (adding_operator -> OR .)
    DIVIDE          reduce using rule 86 (adding_operator -> OR .)
    PERCENTAGE      reduce using rule 86 (adding_operator -> OR .)
    AND             reduce using rule 86 (adding_operator -> OR .)
    EQUAL           reduce using rule 86 (adding_operator -> OR .)
    LESS            reduce using rule 86 (adding_operator -> OR .)
    LESSEQUAL       reduce using rule 86 (adding_operator -> OR .)
    GREATER         reduce using rule 86 (adding_operator -> OR .)
    SEMICOLON       reduce using rule 86 (adding_operator -> OR .)
    END             reduce using rule 86 (adding_operator -> OR .)
    ELSE            reduce using rule 86 (adding_operator -> OR .)
    COMMA           reduce using rule 86 (adding_operator -> OR .)
    RPAREN          reduce using rule 86 (adding_operator -> OR .)
    SIMPLEQUOTE     reduce using rule 86 (adding_operator -> OR .)


state 92

    (67) term -> factor multiplying_operator . factor
    (68) factor -> . call
    (69) factor -> . variable
    (70) factor -> . literal
    (71) factor -> . LPAREN expr RPAREN
    (72) factor -> . NOT factor
    (73) factor -> . factor DOT SIZE
    (37) call -> . ID LPAREN arguments RPAREN
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

    LPAREN          shift and go to state 52
    NOT             shift and go to state 53
    ID              shift and go to state 54
    LBRACKET        shift and go to state 35
    NUMBER          shift and go to state 55
    DOT             reduce using rule 26 (empty -> .)
    PLUS            reduce using rule 26 (empty -> .)
    MINUS           reduce using rule 26 (empty -> .)
    OR              reduce using rule 26 (empty -> .)
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)
    ELSE            reduce using rule 26 (empty -> .)
    COMMA           reduce using rule 26 (empty -> .)
    RPAREN          reduce using rule 26 (empty -> .)
    SIMPLEQUOTE     reduce using rule 26 (empty -> .)

    factor                         shift and go to state 129
    call                           shift and go to state 49
    variable                       shift and go to state 50
    literal                        shift and go to state 51
    string                         shift and go to state 56
    empty                          shift and go to state 57

state 93

    (73) factor -> factor DOT . SIZE

    SIZE            shift and go to state 130


state 94

    (87) multiplying_operator -> TIMES .

    LPAREN          reduce using rule 87 (multiplying_operator -> TIMES .)
    NOT             reduce using rule 87 (multiplying_operator -> TIMES .)
    ID              reduce using rule 87 (multiplying_operator -> TIMES .)
    LBRACKET        reduce using rule 87 (multiplying_operator -> TIMES .)
    NUMBER          reduce using rule 87 (multiplying_operator -> TIMES .)
    DOT             reduce using rule 87 (multiplying_operator -> TIMES .)
    PLUS            reduce using rule 87 (multiplying_operator -> TIMES .)
    MINUS           reduce using rule 87 (multiplying_operator -> TIMES .)
    OR              reduce using rule 87 (multiplying_operator -> TIMES .)
    EQUAL           reduce using rule 87 (multiplying_operator -> TIMES .)
    LESS            reduce using rule 87 (multiplying_operator -> TIMES .)
    LESSEQUAL       reduce using rule 87 (multiplying_operator -> TIMES .)
    GREATER         reduce using rule 87 (multiplying_operator -> TIMES .)
    SEMICOLON       reduce using rule 87 (multiplying_operator -> TIMES .)
    END             reduce using rule 87 (multiplying_operator -> TIMES .)
    ELSE            reduce using rule 87 (multiplying_operator -> TIMES .)
    COMMA           reduce using rule 87 (multiplying_operator -> TIMES .)
    RPAREN          reduce using rule 87 (multiplying_operator -> TIMES .)
    SIMPLEQUOTE     reduce using rule 87 (multiplying_operator -> TIMES .)


state 95

    (88) multiplying_operator -> DIVIDE .

    LPAREN          reduce using rule 88 (multiplying_operator -> DIVIDE .)
    NOT             reduce using rule 88 (multiplying_operator -> DIVIDE .)
    ID              reduce using rule 88 (multiplying_operator -> DIVIDE .)
    LBRACKET        reduce using rule 88 (multiplying_operator -> DIVIDE .)
    NUMBER          reduce using rule 88 (multiplying_operator -> DIVIDE .)
    DOT             reduce using rule 88 (multiplying_operator -> DIVIDE .)
    PLUS            reduce using rule 88 (multiplying_operator -> DIVIDE .)
    MINUS           reduce using rule 88 (multiplying_operator -> DIVIDE .)
    OR              reduce using rule 88 (multiplying_operator -> DIVIDE .)
    EQUAL           reduce using rule 88 (multiplying_operator -> DIVIDE .)
    LESS            reduce using rule 88 (multiplying_operator -> DIVIDE .)
    LESSEQUAL       reduce using rule 88 (multiplying_operator -> DIVIDE .)
    GREATER         reduce using rule 88 (multiplying_operator -> DIVIDE .)
    SEMICOLON       reduce using rule 88 (multiplying_operator -> DIVIDE .)
    END             reduce using rule 88 (multiplying_operator -> DIVIDE .)
    ELSE            reduce using rule 88 (multiplying_operator -> DIVIDE .)
    COMMA           reduce using rule 88 (multiplying_operator -> DIVIDE .)
    RPAREN          reduce using rule 88 (multiplying_operator -> DIVIDE .)
    SIMPLEQUOTE     reduce using rule 88 (multiplying_operator -> DIVIDE .)


state 96

    (89) multiplying_operator -> PERCENTAGE .

    LPAREN          reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    NOT             reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    ID              reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    LBRACKET        reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    NUMBER          reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    DOT             reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    PLUS            reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    MINUS           reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    OR              reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    EQUAL           reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    LESS            reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    LESSEQUAL       reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    GREATER         reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    SEMICOLON       reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    END             reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    ELSE            reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    COMMA           reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    RPAREN          reduce using rule 89 (multiplying_operator -> PERCENTAGE .)
    SIMPLEQUOTE     reduce using rule 89 (multiplying_operator -> PERCENTAGE .)


state 97

    (90) multiplying_operator -> AND .

    LPAREN          reduce using rule 90 (multiplying_operator -> AND .)
    NOT             reduce using rule 90 (multiplying_operator -> AND .)
    ID              reduce using rule 90 (multiplying_operator -> AND .)
    LBRACKET        reduce using rule 90 (multiplying_operator -> AND .)
    NUMBER          reduce using rule 90 (multiplying_operator -> AND .)
    DOT             reduce using rule 90 (multiplying_operator -> AND .)
    PLUS            reduce using rule 90 (multiplying_operator -> AND .)
    MINUS           reduce using rule 90 (multiplying_operator -> AND .)
    OR              reduce using rule 90 (multiplying_operator -> AND .)
    EQUAL           reduce using rule 90 (multiplying_operator -> AND .)
    LESS            reduce using rule 90 (multiplying_operator -> AND .)
    LESSEQUAL       reduce using rule 90 (multiplying_operator -> AND .)
    GREATER         reduce using rule 90 (multiplying_operator -> AND .)
    SEMICOLON       reduce using rule 90 (multiplying_operator -> AND .)
    END             reduce using rule 90 (multiplying_operator -> AND .)
    ELSE            reduce using rule 90 (multiplying_operator -> AND .)
    COMMA           reduce using rule 90 (multiplying_operator -> AND .)
    RPAREN          reduce using rule 90 (multiplying_operator -> AND .)
    SIMPLEQUOTE     reduce using rule 90 (multiplying_operator -> AND .)


state 98

    (71) factor -> LPAREN expr . RPAREN

    RPAREN          shift and go to state 131


state 99

    (72) factor -> NOT factor .
    (73) factor -> factor . DOT SIZE

  ! shift/reduce conflict for DOT resolved as shift
    TIMES           reduce using rule 72 (factor -> NOT factor .)
    DIVIDE          reduce using rule 72 (factor -> NOT factor .)
    PERCENTAGE      reduce using rule 72 (factor -> NOT factor .)
    AND             reduce using rule 72 (factor -> NOT factor .)
    PLUS            reduce using rule 72 (factor -> NOT factor .)
    MINUS           reduce using rule 72 (factor -> NOT factor .)
    OR              reduce using rule 72 (factor -> NOT factor .)
    EQUAL           reduce using rule 72 (factor -> NOT factor .)
    LESS            reduce using rule 72 (factor -> NOT factor .)
    LESSEQUAL       reduce using rule 72 (factor -> NOT factor .)
    GREATER         reduce using rule 72 (factor -> NOT factor .)
    SEMICOLON       reduce using rule 72 (factor -> NOT factor .)
    END             reduce using rule 72 (factor -> NOT factor .)
    ELSE            reduce using rule 72 (factor -> NOT factor .)
    COMMA           reduce using rule 72 (factor -> NOT factor .)
    RPAREN          reduce using rule 72 (factor -> NOT factor .)
    SIMPLEQUOTE     reduce using rule 72 (factor -> NOT factor .)
    DOT             shift and go to state 93

  ! DOT             [ reduce using rule 72 (factor -> NOT factor .) ]


state 100

    (94) string -> ID string .

    DOT             reduce using rule 94 (string -> ID string .)
    TIMES           reduce using rule 94 (string -> ID string .)
    DIVIDE          reduce using rule 94 (string -> ID string .)
    PERCENTAGE      reduce using rule 94 (string -> ID string .)
    AND             reduce using rule 94 (string -> ID string .)
    PLUS            reduce using rule 94 (string -> ID string .)
    MINUS           reduce using rule 94 (string -> ID string .)
    OR              reduce using rule 94 (string -> ID string .)
    EQUAL           reduce using rule 94 (string -> ID string .)
    LESS            reduce using rule 94 (string -> ID string .)
    LESSEQUAL       reduce using rule 94 (string -> ID string .)
    GREATER         reduce using rule 94 (string -> ID string .)
    SEMICOLON       reduce using rule 94 (string -> ID string .)
    END             reduce using rule 94 (string -> ID string .)
    ELSE            reduce using rule 94 (string -> ID string .)
    COMMA           reduce using rule 94 (string -> ID string .)
    RPAREN          reduce using rule 94 (string -> ID string .)
    SIMPLEQUOTE     reduce using rule 94 (string -> ID string .)
    THEN            reduce using rule 94 (string -> ID string .)
    DO              reduce using rule 94 (string -> ID string .)


state 101

    (46) read_statement -> READ LPAREN read_statement2 . RPAREN

    RPAREN          shift and go to state 132


state 102

    (47) read_statement2 -> variable .

    RPAREN          reduce using rule 47 (read_statement2 -> variable .)


state 103

    (48) read_statement2 -> COMMA . variable read_statement2
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET

    ID              shift and go to state 104
    LBRACKET        shift and go to state 35

    variable                       shift and go to state 133

state 104

    (74) variable -> ID .

    RPAREN          reduce using rule 74 (variable -> ID .)
    COMMA           reduce using rule 74 (variable -> ID .)
    ID              reduce using rule 74 (variable -> ID .)
    LBRACKET        reduce using rule 74 (variable -> ID .)


state 105

    (49) write_statement -> WRITELN LPAREN arguments . RPAREN

    RPAREN          shift and go to state 134


state 106

    (50) assert_statement -> ASSERT LPAREN boolean_expr . RPAREN

    RPAREN          shift and go to state 135


state 107

    (57) if_statement -> IF boolean_expr THEN . statement
    (58) if_statement -> IF boolean_expr THEN . statement ELSE statement
    (27) statement -> . simple_statement
    (28) statement -> . structured_statement
    (29) statement -> . declaration
    (30) simple_statement -> . assignment_statement
    (31) simple_statement -> . call
    (32) simple_statement -> . return_statement
    (33) simple_statement -> . read_statement
    (34) simple_statement -> . write_statement
    (35) simple_statement -> . assert_statement
    (54) structured_statement -> . block
    (55) structured_statement -> . if_statement
    (56) structured_statement -> . while_statement
    (2) declaration -> . var_declaration
    (3) declaration -> . procedure_declaration
    (4) declaration -> . function_declaration
    (36) assignment_statement -> . variable ASSIGN expr
    (37) call -> . ID LPAREN arguments RPAREN
    (44) return_statement -> . RETURN
    (45) return_statement -> . RETURN expr
    (46) read_statement -> . READ LPAREN read_statement2 RPAREN
    (49) write_statement -> . WRITELN LPAREN arguments RPAREN
    (50) assert_statement -> . ASSERT LPAREN boolean_expr RPAREN
    (22) block -> . BEGIN statement block2 SEMICOLON END DOT
    (23) block -> . BEGIN statement block2 END DOT
    (57) if_statement -> . IF boolean_expr THEN statement
    (58) if_statement -> . IF boolean_expr THEN statement ELSE statement
    (59) while_statement -> . WHILE boolean_expr DO statement
    (5) var_declaration -> . VAR ID var_declaration2 COLON type
    (8) procedure_declaration -> . procedure_declaration2 SEMICOLON
    (9) procedure_declaration -> . empty
    (11) function_declaration -> . FUNCTION ID LPAREN parameters RPAREN COLON type SEMICOLON block
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (10) procedure_declaration2 -> . PROCEDURE ID SEMICOLON block
    (26) empty -> .

    ID              shift and go to state 24
    RETURN          shift and go to state 25
    READ            shift and go to state 26
    WRITELN         shift and go to state 27
    ASSERT          shift and go to state 28
    BEGIN           shift and go to state 6
    IF              shift and go to state 29
    WHILE           shift and go to state 30
    VAR             shift and go to state 31
    FUNCTION        shift and go to state 34
    LBRACKET        shift and go to state 35
    PROCEDURE       shift and go to state 36
    ELSE            reduce using rule 26 (empty -> .)
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)

    statement                      shift and go to state 136
    simple_statement               shift and go to state 8
    structured_statement           shift and go to state 9
    declaration                    shift and go to state 10
    assignment_statement           shift and go to state 11
    call                           shift and go to state 12
    return_statement               shift and go to state 13
    read_statement                 shift and go to state 14
    write_statement                shift and go to state 15
    assert_statement               shift and go to state 16
    block                          shift and go to state 17
    if_statement                   shift and go to state 18
    while_statement                shift and go to state 19
    var_declaration                shift and go to state 20
    procedure_declaration          shift and go to state 21
    function_declaration           shift and go to state 22
    variable                       shift and go to state 23
    procedure_declaration2         shift and go to state 32
    empty                          shift and go to state 33

state 108

    (53) boolean_expr -> literal relational_operator . literal
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

    NUMBER          shift and go to state 55
    ID              shift and go to state 65
    THEN            reduce using rule 26 (empty -> .)
    DO              reduce using rule 26 (empty -> .)
    RPAREN          reduce using rule 26 (empty -> .)

    literal                        shift and go to state 137
    string                         shift and go to state 56
    empty                          shift and go to state 57

state 109

    (59) while_statement -> WHILE boolean_expr DO . statement
    (27) statement -> . simple_statement
    (28) statement -> . structured_statement
    (29) statement -> . declaration
    (30) simple_statement -> . assignment_statement
    (31) simple_statement -> . call
    (32) simple_statement -> . return_statement
    (33) simple_statement -> . read_statement
    (34) simple_statement -> . write_statement
    (35) simple_statement -> . assert_statement
    (54) structured_statement -> . block
    (55) structured_statement -> . if_statement
    (56) structured_statement -> . while_statement
    (2) declaration -> . var_declaration
    (3) declaration -> . procedure_declaration
    (4) declaration -> . function_declaration
    (36) assignment_statement -> . variable ASSIGN expr
    (37) call -> . ID LPAREN arguments RPAREN
    (44) return_statement -> . RETURN
    (45) return_statement -> . RETURN expr
    (46) read_statement -> . READ LPAREN read_statement2 RPAREN
    (49) write_statement -> . WRITELN LPAREN arguments RPAREN
    (50) assert_statement -> . ASSERT LPAREN boolean_expr RPAREN
    (22) block -> . BEGIN statement block2 SEMICOLON END DOT
    (23) block -> . BEGIN statement block2 END DOT
    (57) if_statement -> . IF boolean_expr THEN statement
    (58) if_statement -> . IF boolean_expr THEN statement ELSE statement
    (59) while_statement -> . WHILE boolean_expr DO statement
    (5) var_declaration -> . VAR ID var_declaration2 COLON type
    (8) procedure_declaration -> . procedure_declaration2 SEMICOLON
    (9) procedure_declaration -> . empty
    (11) function_declaration -> . FUNCTION ID LPAREN parameters RPAREN COLON type SEMICOLON block
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (10) procedure_declaration2 -> . PROCEDURE ID SEMICOLON block
    (26) empty -> .

    ID              shift and go to state 24
    RETURN          shift and go to state 25
    READ            shift and go to state 26
    WRITELN         shift and go to state 27
    ASSERT          shift and go to state 28
    BEGIN           shift and go to state 6
    IF              shift and go to state 29
    WHILE           shift and go to state 30
    VAR             shift and go to state 31
    FUNCTION        shift and go to state 34
    LBRACKET        shift and go to state 35
    PROCEDURE       shift and go to state 36
    ELSE            reduce using rule 26 (empty -> .)
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)

    statement                      shift and go to state 138
    simple_statement               shift and go to state 8
    structured_statement           shift and go to state 9
    declaration                    shift and go to state 10
    assignment_statement           shift and go to state 11
    call                           shift and go to state 12
    return_statement               shift and go to state 13
    read_statement                 shift and go to state 14
    write_statement                shift and go to state 15
    assert_statement               shift and go to state 16
    block                          shift and go to state 17
    if_statement                   shift and go to state 18
    while_statement                shift and go to state 19
    var_declaration                shift and go to state 20
    procedure_declaration          shift and go to state 21
    function_declaration           shift and go to state 22
    variable                       shift and go to state 23
    procedure_declaration2         shift and go to state 32
    empty                          shift and go to state 33

state 110

    (5) var_declaration -> VAR ID var_declaration2 . COLON type

    COLON           shift and go to state 139


state 111

    (6) var_declaration2 -> empty .

    COLON           reduce using rule 6 (var_declaration2 -> empty .)


state 112

    (7) var_declaration2 -> COMMA . ID var_declaration2

    ID              shift and go to state 140


state 113

    (11) function_declaration -> FUNCTION ID LPAREN . parameters RPAREN COLON type SEMICOLON block
    (12) parameters -> . VAR ID COLON type parameters2
    (13) parameters -> . ID COLON type parameters2
    (14) parameters -> . empty
    (26) empty -> .

    VAR             shift and go to state 143
    ID              shift and go to state 141
    RPAREN          reduce using rule 26 (empty -> .)

    parameters                     shift and go to state 142
    empty                          shift and go to state 144

state 114

    (75) variable -> LBRACKET ID NUMBER . RBRACKET

    RBRACKET        shift and go to state 145


state 115

    (10) procedure_declaration2 -> PROCEDURE ID SEMICOLON . block
    (22) block -> . BEGIN statement block2 SEMICOLON END DOT
    (23) block -> . BEGIN statement block2 END DOT

    BEGIN           shift and go to state 6

    block                          shift and go to state 146

state 116

    (22) block -> BEGIN statement block2 SEMICOLON END . DOT

    DOT             shift and go to state 147


state 117

    (23) block -> BEGIN statement block2 END DOT .

    $end            reduce using rule 23 (block -> BEGIN statement block2 END DOT .)
    SEMICOLON       reduce using rule 23 (block -> BEGIN statement block2 END DOT .)
    END             reduce using rule 23 (block -> BEGIN statement block2 END DOT .)
    ELSE            reduce using rule 23 (block -> BEGIN statement block2 END DOT .)


state 118

    (25) block2 -> SEMICOLON statement block2 .

    SEMICOLON       reduce using rule 25 (block2 -> SEMICOLON statement block2 .)
    END             reduce using rule 25 (block2 -> SEMICOLON statement block2 .)


state 119

    (37) call -> ID LPAREN arguments RPAREN .

    SEMICOLON       reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    END             reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    DOT             reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    TIMES           reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    PERCENTAGE      reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    AND             reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    PLUS            reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    MINUS           reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    OR              reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    EQUAL           reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    LESS            reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    LESSEQUAL       reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    GREATER         reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    ELSE            reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    COMMA           reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)
    SIMPLEQUOTE     reduce using rule 37 (call -> ID LPAREN arguments RPAREN .)


state 120

    (38) arguments -> expr arguments2 .

    RPAREN          reduce using rule 38 (arguments -> expr arguments2 .)


state 121

    (41) arguments2 -> empty .

    RPAREN          reduce using rule 41 (arguments2 -> empty .)


state 122

    (42) arguments2 -> COMMA . expr arguments2
    (43) arguments2 -> COMMA . SIMPLEQUOTE expr SIMPLEQUOTE arguments2
    (60) expr -> . simple_expr
    (61) expr -> . simple_expr relational_operator simple_expr
    (62) simple_expr -> . sign term simple_expr2
    (63) simple_expr -> . term simple_expr2
    (82) sign -> . PLUS
    (83) sign -> . MINUS
    (66) term -> . factor
    (67) term -> . factor multiplying_operator factor
    (68) factor -> . call
    (69) factor -> . variable
    (70) factor -> . literal
    (71) factor -> . LPAREN expr RPAREN
    (72) factor -> . NOT factor
    (73) factor -> . factor DOT SIZE
    (37) call -> . ID LPAREN arguments RPAREN
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SIMPLEQUOTE     shift and go to state 149
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    LPAREN          shift and go to state 52
    NOT             shift and go to state 53
    ID              shift and go to state 54
    LBRACKET        shift and go to state 35
    NUMBER          shift and go to state 55
    DOT             reduce using rule 26 (empty -> .)
    TIMES           reduce using rule 26 (empty -> .)
    DIVIDE          reduce using rule 26 (empty -> .)
    PERCENTAGE      reduce using rule 26 (empty -> .)
    AND             reduce using rule 26 (empty -> .)
    OR              reduce using rule 26 (empty -> .)
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    COMMA           reduce using rule 26 (empty -> .)
    RPAREN          reduce using rule 26 (empty -> .)

  ! PLUS            [ reduce using rule 26 (empty -> .) ]
  ! MINUS           [ reduce using rule 26 (empty -> .) ]

    expr                           shift and go to state 148
    simple_expr                    shift and go to state 43
    sign                           shift and go to state 44
    term                           shift and go to state 45
    factor                         shift and go to state 48
    call                           shift and go to state 49
    variable                       shift and go to state 50
    literal                        shift and go to state 51
    string                         shift and go to state 56
    empty                          shift and go to state 57

state 123

    (39) arguments -> SIMPLEQUOTE expr . SIMPLEQUOTE arguments2

    SIMPLEQUOTE     shift and go to state 150


state 124

    (61) expr -> simple_expr relational_operator simple_expr .

    SEMICOLON       reduce using rule 61 (expr -> simple_expr relational_operator simple_expr .)
    END             reduce using rule 61 (expr -> simple_expr relational_operator simple_expr .)
    ELSE            reduce using rule 61 (expr -> simple_expr relational_operator simple_expr .)
    COMMA           reduce using rule 61 (expr -> simple_expr relational_operator simple_expr .)
    RPAREN          reduce using rule 61 (expr -> simple_expr relational_operator simple_expr .)
    SIMPLEQUOTE     reduce using rule 61 (expr -> simple_expr relational_operator simple_expr .)


state 125

    (77) relational_operator -> LESS GREATER .

    PLUS            reduce using rule 77 (relational_operator -> LESS GREATER .)
    MINUS           reduce using rule 77 (relational_operator -> LESS GREATER .)
    LPAREN          reduce using rule 77 (relational_operator -> LESS GREATER .)
    NOT             reduce using rule 77 (relational_operator -> LESS GREATER .)
    ID              reduce using rule 77 (relational_operator -> LESS GREATER .)
    LBRACKET        reduce using rule 77 (relational_operator -> LESS GREATER .)
    NUMBER          reduce using rule 77 (relational_operator -> LESS GREATER .)
    OR              reduce using rule 77 (relational_operator -> LESS GREATER .)
    DOT             reduce using rule 77 (relational_operator -> LESS GREATER .)
    TIMES           reduce using rule 77 (relational_operator -> LESS GREATER .)
    DIVIDE          reduce using rule 77 (relational_operator -> LESS GREATER .)
    PERCENTAGE      reduce using rule 77 (relational_operator -> LESS GREATER .)
    AND             reduce using rule 77 (relational_operator -> LESS GREATER .)
    SEMICOLON       reduce using rule 77 (relational_operator -> LESS GREATER .)
    END             reduce using rule 77 (relational_operator -> LESS GREATER .)
    ELSE            reduce using rule 77 (relational_operator -> LESS GREATER .)
    COMMA           reduce using rule 77 (relational_operator -> LESS GREATER .)
    RPAREN          reduce using rule 77 (relational_operator -> LESS GREATER .)
    SIMPLEQUOTE     reduce using rule 77 (relational_operator -> LESS GREATER .)
    THEN            reduce using rule 77 (relational_operator -> LESS GREATER .)
    DO              reduce using rule 77 (relational_operator -> LESS GREATER .)


state 126

    (80) relational_operator -> GREATER EQUAL .

    PLUS            reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    MINUS           reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    LPAREN          reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    NOT             reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    ID              reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    LBRACKET        reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    NUMBER          reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    OR              reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    DOT             reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    TIMES           reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    DIVIDE          reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    PERCENTAGE      reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    AND             reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    SEMICOLON       reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    END             reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    ELSE            reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    COMMA           reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    RPAREN          reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    SIMPLEQUOTE     reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    THEN            reduce using rule 80 (relational_operator -> GREATER EQUAL .)
    DO              reduce using rule 80 (relational_operator -> GREATER EQUAL .)


state 127

    (62) simple_expr -> sign term simple_expr2 .

    EQUAL           reduce using rule 62 (simple_expr -> sign term simple_expr2 .)
    LESS            reduce using rule 62 (simple_expr -> sign term simple_expr2 .)
    LESSEQUAL       reduce using rule 62 (simple_expr -> sign term simple_expr2 .)
    GREATER         reduce using rule 62 (simple_expr -> sign term simple_expr2 .)
    SEMICOLON       reduce using rule 62 (simple_expr -> sign term simple_expr2 .)
    END             reduce using rule 62 (simple_expr -> sign term simple_expr2 .)
    ELSE            reduce using rule 62 (simple_expr -> sign term simple_expr2 .)
    COMMA           reduce using rule 62 (simple_expr -> sign term simple_expr2 .)
    RPAREN          reduce using rule 62 (simple_expr -> sign term simple_expr2 .)
    SIMPLEQUOTE     reduce using rule 62 (simple_expr -> sign term simple_expr2 .)


state 128

    (65) simple_expr2 -> adding_operator term . simple_expr2
    (64) simple_expr2 -> . empty
    (65) simple_expr2 -> . adding_operator term simple_expr2
    (26) empty -> .
    (84) adding_operator -> . PLUS
    (85) adding_operator -> . MINUS
    (86) adding_operator -> . OR

    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)
    ELSE            reduce using rule 26 (empty -> .)
    COMMA           reduce using rule 26 (empty -> .)
    RPAREN          reduce using rule 26 (empty -> .)
    SIMPLEQUOTE     reduce using rule 26 (empty -> .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    OR              shift and go to state 91

    adding_operator                shift and go to state 88
    simple_expr2                   shift and go to state 151
    empty                          shift and go to state 87

state 129

    (67) term -> factor multiplying_operator factor .
    (73) factor -> factor . DOT SIZE

    PLUS            reduce using rule 67 (term -> factor multiplying_operator factor .)
    MINUS           reduce using rule 67 (term -> factor multiplying_operator factor .)
    OR              reduce using rule 67 (term -> factor multiplying_operator factor .)
    EQUAL           reduce using rule 67 (term -> factor multiplying_operator factor .)
    LESS            reduce using rule 67 (term -> factor multiplying_operator factor .)
    LESSEQUAL       reduce using rule 67 (term -> factor multiplying_operator factor .)
    GREATER         reduce using rule 67 (term -> factor multiplying_operator factor .)
    SEMICOLON       reduce using rule 67 (term -> factor multiplying_operator factor .)
    END             reduce using rule 67 (term -> factor multiplying_operator factor .)
    ELSE            reduce using rule 67 (term -> factor multiplying_operator factor .)
    COMMA           reduce using rule 67 (term -> factor multiplying_operator factor .)
    RPAREN          reduce using rule 67 (term -> factor multiplying_operator factor .)
    SIMPLEQUOTE     reduce using rule 67 (term -> factor multiplying_operator factor .)
    DOT             shift and go to state 93


state 130

    (73) factor -> factor DOT SIZE .

    DOT             reduce using rule 73 (factor -> factor DOT SIZE .)
    TIMES           reduce using rule 73 (factor -> factor DOT SIZE .)
    DIVIDE          reduce using rule 73 (factor -> factor DOT SIZE .)
    PERCENTAGE      reduce using rule 73 (factor -> factor DOT SIZE .)
    AND             reduce using rule 73 (factor -> factor DOT SIZE .)
    PLUS            reduce using rule 73 (factor -> factor DOT SIZE .)
    MINUS           reduce using rule 73 (factor -> factor DOT SIZE .)
    OR              reduce using rule 73 (factor -> factor DOT SIZE .)
    EQUAL           reduce using rule 73 (factor -> factor DOT SIZE .)
    LESS            reduce using rule 73 (factor -> factor DOT SIZE .)
    LESSEQUAL       reduce using rule 73 (factor -> factor DOT SIZE .)
    GREATER         reduce using rule 73 (factor -> factor DOT SIZE .)
    SEMICOLON       reduce using rule 73 (factor -> factor DOT SIZE .)
    END             reduce using rule 73 (factor -> factor DOT SIZE .)
    ELSE            reduce using rule 73 (factor -> factor DOT SIZE .)
    COMMA           reduce using rule 73 (factor -> factor DOT SIZE .)
    RPAREN          reduce using rule 73 (factor -> factor DOT SIZE .)
    SIMPLEQUOTE     reduce using rule 73 (factor -> factor DOT SIZE .)


state 131

    (71) factor -> LPAREN expr RPAREN .

    DOT             reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    PERCENTAGE      reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    AND             reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    OR              reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    EQUAL           reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    LESS            reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    LESSEQUAL       reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    GREATER         reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    END             reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 71 (factor -> LPAREN expr RPAREN .)
    SIMPLEQUOTE     reduce using rule 71 (factor -> LPAREN expr RPAREN .)


state 132

    (46) read_statement -> READ LPAREN read_statement2 RPAREN .

    SEMICOLON       reduce using rule 46 (read_statement -> READ LPAREN read_statement2 RPAREN .)
    END             reduce using rule 46 (read_statement -> READ LPAREN read_statement2 RPAREN .)
    ELSE            reduce using rule 46 (read_statement -> READ LPAREN read_statement2 RPAREN .)


state 133

    (48) read_statement2 -> COMMA variable . read_statement2
    (47) read_statement2 -> . variable
    (48) read_statement2 -> . COMMA variable read_statement2
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET

    COMMA           shift and go to state 103
    ID              shift and go to state 104
    LBRACKET        shift and go to state 35

    variable                       shift and go to state 102
    read_statement2                shift and go to state 152

state 134

    (49) write_statement -> WRITELN LPAREN arguments RPAREN .

    SEMICOLON       reduce using rule 49 (write_statement -> WRITELN LPAREN arguments RPAREN .)
    END             reduce using rule 49 (write_statement -> WRITELN LPAREN arguments RPAREN .)
    ELSE            reduce using rule 49 (write_statement -> WRITELN LPAREN arguments RPAREN .)


state 135

    (50) assert_statement -> ASSERT LPAREN boolean_expr RPAREN .

    SEMICOLON       reduce using rule 50 (assert_statement -> ASSERT LPAREN boolean_expr RPAREN .)
    END             reduce using rule 50 (assert_statement -> ASSERT LPAREN boolean_expr RPAREN .)
    ELSE            reduce using rule 50 (assert_statement -> ASSERT LPAREN boolean_expr RPAREN .)


state 136

    (57) if_statement -> IF boolean_expr THEN statement .
    (58) if_statement -> IF boolean_expr THEN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON       reduce using rule 57 (if_statement -> IF boolean_expr THEN statement .)
    END             reduce using rule 57 (if_statement -> IF boolean_expr THEN statement .)
    ELSE            shift and go to state 153

  ! ELSE            [ reduce using rule 57 (if_statement -> IF boolean_expr THEN statement .) ]


state 137

    (53) boolean_expr -> literal relational_operator literal .

    THEN            reduce using rule 53 (boolean_expr -> literal relational_operator literal .)
    DO              reduce using rule 53 (boolean_expr -> literal relational_operator literal .)
    RPAREN          reduce using rule 53 (boolean_expr -> literal relational_operator literal .)


state 138

    (59) while_statement -> WHILE boolean_expr DO statement .

    SEMICOLON       reduce using rule 59 (while_statement -> WHILE boolean_expr DO statement .)
    END             reduce using rule 59 (while_statement -> WHILE boolean_expr DO statement .)
    ELSE            reduce using rule 59 (while_statement -> WHILE boolean_expr DO statement .)


state 139

    (5) var_declaration -> VAR ID var_declaration2 COLON . type
    (18) type -> . simple_type
    (19) type -> . array_type
    (21) simple_type -> . INTEGER
    (20) array_type -> . ARRAY LBRACKET NUMBER RBRACKET OF simple_type

    INTEGER         shift and go to state 157
    ARRAY           shift and go to state 158

    type                           shift and go to state 154
    simple_type                    shift and go to state 155
    array_type                     shift and go to state 156

state 140

    (7) var_declaration2 -> COMMA ID . var_declaration2
    (6) var_declaration2 -> . empty
    (7) var_declaration2 -> . COMMA ID var_declaration2
    (26) empty -> .

    COMMA           shift and go to state 112
    COLON           reduce using rule 26 (empty -> .)

    var_declaration2               shift and go to state 159
    empty                          shift and go to state 111

state 141

    (13) parameters -> ID . COLON type parameters2

    COLON           shift and go to state 160


state 142

    (11) function_declaration -> FUNCTION ID LPAREN parameters . RPAREN COLON type SEMICOLON block

    RPAREN          shift and go to state 161


state 143

    (12) parameters -> VAR . ID COLON type parameters2

    ID              shift and go to state 162


state 144

    (14) parameters -> empty .

    RPAREN          reduce using rule 14 (parameters -> empty .)


state 145

    (75) variable -> LBRACKET ID NUMBER RBRACKET .

    ASSIGN          reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    DOT             reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    TIMES           reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    DIVIDE          reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    PERCENTAGE      reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    AND             reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    PLUS            reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    MINUS           reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    OR              reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    EQUAL           reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    LESS            reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    LESSEQUAL       reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    GREATER         reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    SEMICOLON       reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    END             reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    ELSE            reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    COMMA           reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    RPAREN          reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    SIMPLEQUOTE     reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    ID              reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)
    LBRACKET        reduce using rule 75 (variable -> LBRACKET ID NUMBER RBRACKET .)


state 146

    (10) procedure_declaration2 -> PROCEDURE ID SEMICOLON block .

    SEMICOLON       reduce using rule 10 (procedure_declaration2 -> PROCEDURE ID SEMICOLON block .)


state 147

    (22) block -> BEGIN statement block2 SEMICOLON END DOT .

    $end            reduce using rule 22 (block -> BEGIN statement block2 SEMICOLON END DOT .)
    SEMICOLON       reduce using rule 22 (block -> BEGIN statement block2 SEMICOLON END DOT .)
    END             reduce using rule 22 (block -> BEGIN statement block2 SEMICOLON END DOT .)
    ELSE            reduce using rule 22 (block -> BEGIN statement block2 SEMICOLON END DOT .)


state 148

    (42) arguments2 -> COMMA expr . arguments2
    (41) arguments2 -> . empty
    (42) arguments2 -> . COMMA expr arguments2
    (43) arguments2 -> . COMMA SIMPLEQUOTE expr SIMPLEQUOTE arguments2
    (26) empty -> .

    COMMA           shift and go to state 122
    RPAREN          reduce using rule 26 (empty -> .)

    arguments2                     shift and go to state 163
    empty                          shift and go to state 121

state 149

    (43) arguments2 -> COMMA SIMPLEQUOTE . expr SIMPLEQUOTE arguments2
    (60) expr -> . simple_expr
    (61) expr -> . simple_expr relational_operator simple_expr
    (62) simple_expr -> . sign term simple_expr2
    (63) simple_expr -> . term simple_expr2
    (82) sign -> . PLUS
    (83) sign -> . MINUS
    (66) term -> . factor
    (67) term -> . factor multiplying_operator factor
    (68) factor -> . call
    (69) factor -> . variable
    (70) factor -> . literal
    (71) factor -> . LPAREN expr RPAREN
    (72) factor -> . NOT factor
    (73) factor -> . factor DOT SIZE
    (37) call -> . ID LPAREN arguments RPAREN
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (91) literal -> . NUMBER
    (92) literal -> . string
    (93) string -> . empty
    (94) string -> . ID string
    (26) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    LPAREN          shift and go to state 52
    NOT             shift and go to state 53
    ID              shift and go to state 54
    LBRACKET        shift and go to state 35
    NUMBER          shift and go to state 55
    DOT             reduce using rule 26 (empty -> .)
    TIMES           reduce using rule 26 (empty -> .)
    DIVIDE          reduce using rule 26 (empty -> .)
    PERCENTAGE      reduce using rule 26 (empty -> .)
    AND             reduce using rule 26 (empty -> .)
    OR              reduce using rule 26 (empty -> .)
    EQUAL           reduce using rule 26 (empty -> .)
    LESS            reduce using rule 26 (empty -> .)
    LESSEQUAL       reduce using rule 26 (empty -> .)
    GREATER         reduce using rule 26 (empty -> .)
    SIMPLEQUOTE     reduce using rule 26 (empty -> .)

  ! PLUS            [ reduce using rule 26 (empty -> .) ]
  ! MINUS           [ reduce using rule 26 (empty -> .) ]

    expr                           shift and go to state 164
    simple_expr                    shift and go to state 43
    sign                           shift and go to state 44
    term                           shift and go to state 45
    factor                         shift and go to state 48
    call                           shift and go to state 49
    variable                       shift and go to state 50
    literal                        shift and go to state 51
    string                         shift and go to state 56
    empty                          shift and go to state 57

state 150

    (39) arguments -> SIMPLEQUOTE expr SIMPLEQUOTE . arguments2
    (41) arguments2 -> . empty
    (42) arguments2 -> . COMMA expr arguments2
    (43) arguments2 -> . COMMA SIMPLEQUOTE expr SIMPLEQUOTE arguments2
    (26) empty -> .

    COMMA           shift and go to state 122
    RPAREN          reduce using rule 26 (empty -> .)

    arguments2                     shift and go to state 165
    empty                          shift and go to state 121

state 151

    (65) simple_expr2 -> adding_operator term simple_expr2 .

    EQUAL           reduce using rule 65 (simple_expr2 -> adding_operator term simple_expr2 .)
    LESS            reduce using rule 65 (simple_expr2 -> adding_operator term simple_expr2 .)
    LESSEQUAL       reduce using rule 65 (simple_expr2 -> adding_operator term simple_expr2 .)
    GREATER         reduce using rule 65 (simple_expr2 -> adding_operator term simple_expr2 .)
    SEMICOLON       reduce using rule 65 (simple_expr2 -> adding_operator term simple_expr2 .)
    END             reduce using rule 65 (simple_expr2 -> adding_operator term simple_expr2 .)
    ELSE            reduce using rule 65 (simple_expr2 -> adding_operator term simple_expr2 .)
    COMMA           reduce using rule 65 (simple_expr2 -> adding_operator term simple_expr2 .)
    RPAREN          reduce using rule 65 (simple_expr2 -> adding_operator term simple_expr2 .)
    SIMPLEQUOTE     reduce using rule 65 (simple_expr2 -> adding_operator term simple_expr2 .)


state 152

    (48) read_statement2 -> COMMA variable read_statement2 .

    RPAREN          reduce using rule 48 (read_statement2 -> COMMA variable read_statement2 .)


state 153

    (58) if_statement -> IF boolean_expr THEN statement ELSE . statement
    (27) statement -> . simple_statement
    (28) statement -> . structured_statement
    (29) statement -> . declaration
    (30) simple_statement -> . assignment_statement
    (31) simple_statement -> . call
    (32) simple_statement -> . return_statement
    (33) simple_statement -> . read_statement
    (34) simple_statement -> . write_statement
    (35) simple_statement -> . assert_statement
    (54) structured_statement -> . block
    (55) structured_statement -> . if_statement
    (56) structured_statement -> . while_statement
    (2) declaration -> . var_declaration
    (3) declaration -> . procedure_declaration
    (4) declaration -> . function_declaration
    (36) assignment_statement -> . variable ASSIGN expr
    (37) call -> . ID LPAREN arguments RPAREN
    (44) return_statement -> . RETURN
    (45) return_statement -> . RETURN expr
    (46) read_statement -> . READ LPAREN read_statement2 RPAREN
    (49) write_statement -> . WRITELN LPAREN arguments RPAREN
    (50) assert_statement -> . ASSERT LPAREN boolean_expr RPAREN
    (22) block -> . BEGIN statement block2 SEMICOLON END DOT
    (23) block -> . BEGIN statement block2 END DOT
    (57) if_statement -> . IF boolean_expr THEN statement
    (58) if_statement -> . IF boolean_expr THEN statement ELSE statement
    (59) while_statement -> . WHILE boolean_expr DO statement
    (5) var_declaration -> . VAR ID var_declaration2 COLON type
    (8) procedure_declaration -> . procedure_declaration2 SEMICOLON
    (9) procedure_declaration -> . empty
    (11) function_declaration -> . FUNCTION ID LPAREN parameters RPAREN COLON type SEMICOLON block
    (74) variable -> . ID
    (75) variable -> . LBRACKET ID NUMBER RBRACKET
    (10) procedure_declaration2 -> . PROCEDURE ID SEMICOLON block
    (26) empty -> .

    ID              shift and go to state 24
    RETURN          shift and go to state 25
    READ            shift and go to state 26
    WRITELN         shift and go to state 27
    ASSERT          shift and go to state 28
    BEGIN           shift and go to state 6
    IF              shift and go to state 29
    WHILE           shift and go to state 30
    VAR             shift and go to state 31
    FUNCTION        shift and go to state 34
    LBRACKET        shift and go to state 35
    PROCEDURE       shift and go to state 36
    ELSE            reduce using rule 26 (empty -> .)
    SEMICOLON       reduce using rule 26 (empty -> .)
    END             reduce using rule 26 (empty -> .)

    statement                      shift and go to state 166
    simple_statement               shift and go to state 8
    structured_statement           shift and go to state 9
    declaration                    shift and go to state 10
    assignment_statement           shift and go to state 11
    call                           shift and go to state 12
    return_statement               shift and go to state 13
    read_statement                 shift and go to state 14
    write_statement                shift and go to state 15
    assert_statement               shift and go to state 16
    block                          shift and go to state 17
    if_statement                   shift and go to state 18
    while_statement                shift and go to state 19
    var_declaration                shift and go to state 20
    procedure_declaration          shift and go to state 21
    function_declaration           shift and go to state 22
    variable                       shift and go to state 23
    procedure_declaration2         shift and go to state 32
    empty                          shift and go to state 33

state 154

    (5) var_declaration -> VAR ID var_declaration2 COLON type .

    SEMICOLON       reduce using rule 5 (var_declaration -> VAR ID var_declaration2 COLON type .)
    END             reduce using rule 5 (var_declaration -> VAR ID var_declaration2 COLON type .)
    ELSE            reduce using rule 5 (var_declaration -> VAR ID var_declaration2 COLON type .)


state 155

    (18) type -> simple_type .

    SEMICOLON       reduce using rule 18 (type -> simple_type .)
    END             reduce using rule 18 (type -> simple_type .)
    ELSE            reduce using rule 18 (type -> simple_type .)
    COMMA           reduce using rule 18 (type -> simple_type .)
    RPAREN          reduce using rule 18 (type -> simple_type .)


state 156

    (19) type -> array_type .

    SEMICOLON       reduce using rule 19 (type -> array_type .)
    END             reduce using rule 19 (type -> array_type .)
    ELSE            reduce using rule 19 (type -> array_type .)
    COMMA           reduce using rule 19 (type -> array_type .)
    RPAREN          reduce using rule 19 (type -> array_type .)


state 157

    (21) simple_type -> INTEGER .

    SEMICOLON       reduce using rule 21 (simple_type -> INTEGER .)
    END             reduce using rule 21 (simple_type -> INTEGER .)
    ELSE            reduce using rule 21 (simple_type -> INTEGER .)
    COMMA           reduce using rule 21 (simple_type -> INTEGER .)
    RPAREN          reduce using rule 21 (simple_type -> INTEGER .)


state 158

    (20) array_type -> ARRAY . LBRACKET NUMBER RBRACKET OF simple_type

    LBRACKET        shift and go to state 167


state 159

    (7) var_declaration2 -> COMMA ID var_declaration2 .

    COLON           reduce using rule 7 (var_declaration2 -> COMMA ID var_declaration2 .)


state 160

    (13) parameters -> ID COLON . type parameters2
    (18) type -> . simple_type
    (19) type -> . array_type
    (21) simple_type -> . INTEGER
    (20) array_type -> . ARRAY LBRACKET NUMBER RBRACKET OF simple_type

    INTEGER         shift and go to state 157
    ARRAY           shift and go to state 158

    type                           shift and go to state 168
    simple_type                    shift and go to state 155
    array_type                     shift and go to state 156

state 161

    (11) function_declaration -> FUNCTION ID LPAREN parameters RPAREN . COLON type SEMICOLON block

    COLON           shift and go to state 169


state 162

    (12) parameters -> VAR ID . COLON type parameters2

    COLON           shift and go to state 170


state 163

    (42) arguments2 -> COMMA expr arguments2 .

    RPAREN          reduce using rule 42 (arguments2 -> COMMA expr arguments2 .)


state 164

    (43) arguments2 -> COMMA SIMPLEQUOTE expr . SIMPLEQUOTE arguments2

    SIMPLEQUOTE     shift and go to state 171


state 165

    (39) arguments -> SIMPLEQUOTE expr SIMPLEQUOTE arguments2 .

    RPAREN          reduce using rule 39 (arguments -> SIMPLEQUOTE expr SIMPLEQUOTE arguments2 .)


state 166

    (58) if_statement -> IF boolean_expr THEN statement ELSE statement .

    SEMICOLON       reduce using rule 58 (if_statement -> IF boolean_expr THEN statement ELSE statement .)
    END             reduce using rule 58 (if_statement -> IF boolean_expr THEN statement ELSE statement .)
    ELSE            reduce using rule 58 (if_statement -> IF boolean_expr THEN statement ELSE statement .)


state 167

    (20) array_type -> ARRAY LBRACKET . NUMBER RBRACKET OF simple_type

    NUMBER          shift and go to state 172


state 168

    (13) parameters -> ID COLON type . parameters2
    (15) parameters2 -> . COMMA VAR ID COLON type parameters2
    (16) parameters2 -> . COMMA ID COLON type parameters2
    (17) parameters2 -> . empty
    (26) empty -> .

    COMMA           shift and go to state 174
    RPAREN          reduce using rule 26 (empty -> .)

    parameters2                    shift and go to state 173
    empty                          shift and go to state 175

state 169

    (11) function_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON . type SEMICOLON block
    (18) type -> . simple_type
    (19) type -> . array_type
    (21) simple_type -> . INTEGER
    (20) array_type -> . ARRAY LBRACKET NUMBER RBRACKET OF simple_type

    INTEGER         shift and go to state 157
    ARRAY           shift and go to state 158

    type                           shift and go to state 176
    simple_type                    shift and go to state 155
    array_type                     shift and go to state 156

state 170

    (12) parameters -> VAR ID COLON . type parameters2
    (18) type -> . simple_type
    (19) type -> . array_type
    (21) simple_type -> . INTEGER
    (20) array_type -> . ARRAY LBRACKET NUMBER RBRACKET OF simple_type

    INTEGER         shift and go to state 157
    ARRAY           shift and go to state 158

    type                           shift and go to state 177
    simple_type                    shift and go to state 155
    array_type                     shift and go to state 156

state 171

    (43) arguments2 -> COMMA SIMPLEQUOTE expr SIMPLEQUOTE . arguments2
    (41) arguments2 -> . empty
    (42) arguments2 -> . COMMA expr arguments2
    (43) arguments2 -> . COMMA SIMPLEQUOTE expr SIMPLEQUOTE arguments2
    (26) empty -> .

    COMMA           shift and go to state 122
    RPAREN          reduce using rule 26 (empty -> .)

    arguments2                     shift and go to state 178
    empty                          shift and go to state 121

state 172

    (20) array_type -> ARRAY LBRACKET NUMBER . RBRACKET OF simple_type

    RBRACKET        shift and go to state 179


state 173

    (13) parameters -> ID COLON type parameters2 .

    RPAREN          reduce using rule 13 (parameters -> ID COLON type parameters2 .)


state 174

    (15) parameters2 -> COMMA . VAR ID COLON type parameters2
    (16) parameters2 -> COMMA . ID COLON type parameters2

    VAR             shift and go to state 180
    ID              shift and go to state 181


state 175

    (17) parameters2 -> empty .

    RPAREN          reduce using rule 17 (parameters2 -> empty .)


state 176

    (11) function_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type . SEMICOLON block

    SEMICOLON       shift and go to state 182


state 177

    (12) parameters -> VAR ID COLON type . parameters2
    (15) parameters2 -> . COMMA VAR ID COLON type parameters2
    (16) parameters2 -> . COMMA ID COLON type parameters2
    (17) parameters2 -> . empty
    (26) empty -> .

    COMMA           shift and go to state 174
    RPAREN          reduce using rule 26 (empty -> .)

    parameters2                    shift and go to state 183
    empty                          shift and go to state 175

state 178

    (43) arguments2 -> COMMA SIMPLEQUOTE expr SIMPLEQUOTE arguments2 .

    RPAREN          reduce using rule 43 (arguments2 -> COMMA SIMPLEQUOTE expr SIMPLEQUOTE arguments2 .)


state 179

    (20) array_type -> ARRAY LBRACKET NUMBER RBRACKET . OF simple_type

    OF              shift and go to state 184


state 180

    (15) parameters2 -> COMMA VAR . ID COLON type parameters2

    ID              shift and go to state 185


state 181

    (16) parameters2 -> COMMA ID . COLON type parameters2

    COLON           shift and go to state 186


state 182

    (11) function_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type SEMICOLON . block
    (22) block -> . BEGIN statement block2 SEMICOLON END DOT
    (23) block -> . BEGIN statement block2 END DOT

    BEGIN           shift and go to state 6

    block                          shift and go to state 187

state 183

    (12) parameters -> VAR ID COLON type parameters2 .

    RPAREN          reduce using rule 12 (parameters -> VAR ID COLON type parameters2 .)


state 184

    (20) array_type -> ARRAY LBRACKET NUMBER RBRACKET OF . simple_type
    (21) simple_type -> . INTEGER

    INTEGER         shift and go to state 157

    simple_type                    shift and go to state 188

state 185

    (15) parameters2 -> COMMA VAR ID . COLON type parameters2

    COLON           shift and go to state 189


state 186

    (16) parameters2 -> COMMA ID COLON . type parameters2
    (18) type -> . simple_type
    (19) type -> . array_type
    (21) simple_type -> . INTEGER
    (20) array_type -> . ARRAY LBRACKET NUMBER RBRACKET OF simple_type

    INTEGER         shift and go to state 157
    ARRAY           shift and go to state 158

    type                           shift and go to state 190
    simple_type                    shift and go to state 155
    array_type                     shift and go to state 156

state 187

    (11) function_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type SEMICOLON block .

    SEMICOLON       reduce using rule 11 (function_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type SEMICOLON block .)
    END             reduce using rule 11 (function_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type SEMICOLON block .)
    ELSE            reduce using rule 11 (function_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type SEMICOLON block .)


state 188

    (20) array_type -> ARRAY LBRACKET NUMBER RBRACKET OF simple_type .

    SEMICOLON       reduce using rule 20 (array_type -> ARRAY LBRACKET NUMBER RBRACKET OF simple_type .)
    END             reduce using rule 20 (array_type -> ARRAY LBRACKET NUMBER RBRACKET OF simple_type .)
    ELSE            reduce using rule 20 (array_type -> ARRAY LBRACKET NUMBER RBRACKET OF simple_type .)
    COMMA           reduce using rule 20 (array_type -> ARRAY LBRACKET NUMBER RBRACKET OF simple_type .)
    RPAREN          reduce using rule 20 (array_type -> ARRAY LBRACKET NUMBER RBRACKET OF simple_type .)


state 189

    (15) parameters2 -> COMMA VAR ID COLON . type parameters2
    (18) type -> . simple_type
    (19) type -> . array_type
    (21) simple_type -> . INTEGER
    (20) array_type -> . ARRAY LBRACKET NUMBER RBRACKET OF simple_type

    INTEGER         shift and go to state 157
    ARRAY           shift and go to state 158

    type                           shift and go to state 191
    simple_type                    shift and go to state 155
    array_type                     shift and go to state 156

state 190

    (16) parameters2 -> COMMA ID COLON type . parameters2
    (15) parameters2 -> . COMMA VAR ID COLON type parameters2
    (16) parameters2 -> . COMMA ID COLON type parameters2
    (17) parameters2 -> . empty
    (26) empty -> .

    COMMA           shift and go to state 174
    RPAREN          reduce using rule 26 (empty -> .)

    parameters2                    shift and go to state 192
    empty                          shift and go to state 175

state 191

    (15) parameters2 -> COMMA VAR ID COLON type . parameters2
    (15) parameters2 -> . COMMA VAR ID COLON type parameters2
    (16) parameters2 -> . COMMA ID COLON type parameters2
    (17) parameters2 -> . empty
    (26) empty -> .

    COMMA           shift and go to state 174
    RPAREN          reduce using rule 26 (empty -> .)

    parameters2                    shift and go to state 193
    empty                          shift and go to state 175

state 192

    (16) parameters2 -> COMMA ID COLON type parameters2 .

    RPAREN          reduce using rule 16 (parameters2 -> COMMA ID COLON type parameters2 .)


state 193

    (15) parameters2 -> COMMA VAR ID COLON type parameters2 .

    RPAREN          reduce using rule 15 (parameters2 -> COMMA VAR ID COLON type parameters2 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 7 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 25 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 25 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 40 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 40 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 41 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 41 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for DOT in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 136 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 149 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 149 resolved as shift
WARNING: reduce/reduce conflict in state 25 resolved using rule (empty -> <empty>)
WARNING: rejected rule (return_statement -> RETURN) in state 25
WARNING: reduce/reduce conflict in state 54 resolved using rule (empty -> <empty>)
WARNING: rejected rule (variable -> ID) in state 54
WARNING: reduce/reduce conflict in state 79 resolved using rule (arguments -> empty)
WARNING: rejected rule (string -> empty) in state 79
WARNING: Rule (return_statement -> RETURN) is never reduced
